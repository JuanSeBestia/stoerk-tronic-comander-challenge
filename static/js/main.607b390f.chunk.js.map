{"version":3,"sources":["shared/components/Loading.tsx","shared/utils/mock/sleepPromise.ts","modules/Commander/business-logic/eventsToRangeEvents.ts","modules/Commander/business-logic/eventCommanderAPI.ts","modules/Commander/state/useEventCommanderRange.ts","modules/Commander/models/events.ts","modules/Commander/components/MultipleChoseForm.tsx","modules/Commander/components/RelativeTimePicker.tsx","modules/Commander/components/Filters.tsx","modules/Commander/components/Charts/chart.model.ts","modules/Commander/Commander.tsx","assets/imgs/logo-stor.jpeg","modules/Commander/components/Charts/Apex/config.ts","modules/Commander/components/Charts/Apex/mapEventToSeriesApexBrushChart.ts","modules/Commander/components/Charts/Apex/ApexBrush/index.tsx","modules/Commander/components/Charts/Apex/ApexSeries/rangeEventsToApexchartSeries.ts","modules/Commander/components/Charts/Apex/ApexSeries/index.tsx","modules/Commander/components/Charts/Apex/ApexBrush/ApexBrushWithRange.tsx","modules/Commander/components/Charts/Apex/ApexLine/index.tsx","modules/Commander/components/Charts/Apex/ApexLineTwoAxies/index.tsx","modules/Commander/components/Charts/ChartJS/Util.ts","modules/Commander/components/Charts/ChartJS/MultiAxisLine.tsx","modules/Commander/components/Charts/ChartJS/index.ts","modules/Commander/components/Charts/D3/C3/C3LineBrush.tsx","modules/Commander/components/Charts/D3/D3/D3Line3.jsx","modules/Commander/components/Charts/D3/D3/mapsEventsToD3.ts","modules/Commander/components/Charts/D3/D3/useD3.ts","modules/Commander/components/Charts/DevExtreme/mapEventsToLineDevExtreme.tsx","modules/Commander/components/Charts/DevExtreme/BrushDevExtreme/index.tsx","modules/Commander/components/Charts/DevExtreme/mapEventsToRangeDevExtreme.tsx","modules/Commander/components/Charts/DevExtreme/RangeTime/index.tsx","modules/Commander/components/Charts/ST-Google/STGoogleSeries.tsx","modules/Commander/components/Charts/chartSeries.tsx","modules/Commander/components/Charts/ST-Google/mapEventsToSeries.ts","modules/Commander/components/Charts/ChartJS/mapEventsToDataSetsChartJs.ts","modules/Commander/components/Charts/D3/C3/mapEventsToC3Columns.ts","modules/Commander/components/Charts/ST-Google/STGoogleLine.tsx","modules/Commander/components/Charts/ST-Google/mapEventsToLine.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loading","className","icon","spin","size","sleepPromise","millisecond","Promise","resolve","setTimeout","eventsToRangeEvents","listSensorData","precision","map","sensorData","rangesValues","values","reduce","listEventRange","itemEvent","index","from","timestamp","to","valid","acumulateValue","value","items","previousEvent","lastEventRange","length","moment","add","isSameOrAfter","push","eventCommanderAPI","getEvents","filterState","then","baseRaw","dates","relative","axios","get","data","console","log","useEventCommanderRange","EventComponentType","EventStateType","useState","loading","setLoading","undefined","error","sensorDataRangeList","setSensorDataRangeList","useEffect","SeonsorCommanderAPI","finally","hasItem","list","item","find","itemList","_","isEqual","MultipleChoseForm","controlId","field","setField","options","label","Card","Body","Form","Group","Label","Check","id","type","name","text","onChange","elementInList","filter","toggleItem","checked","style","color","RelativeTimePicker","FilterTypes","FormControl","variant","InputLabel","Select","labelId","event","target","MenuItem","statesOptions","Object","Filters","setFilterState","componentsOptions","refForm","useRef","components","states","ref","Accordion","Header","Toggle","as","Button","eventKey","COMPONENTS","STATES","DATES","Collapse","COLORS","initialFilterState","Commander","ChartComponent","setComponentsOptions","sensor","controlunit","channel","controlunitName","DATE_FORMAT","STATE_COLORS","On","INVALID","Off","chart","height","plotOptions","bar","horizontal","distributed","barHeight","dataLabels","hideOverflowingLabels","enabled","xaxis","yaxis","show","tooltip","x","format","y","custom","series","seriesIndex","dataPointIndex","w","seriesName","ylabel","start","end","diff","buildCustomTooltipHTML","globals","colors","config","state","seriesRangeStart","seriesRangeEnd","a","diffDateFormat","grid","row","opacity","mapEventToSeriesApexTimeLineChart","listSensors","indexSensor","unit","fillColor","ON","optionsLine","brush","selection","min","Date","getTime","max","fill","gradient","opacityFrom","opacityTo","tickAmount","brushOptions","toolbar","autoSelected","stroke","width","markers","shared","rangeEventsToApexchartSeries","flatMap","valueOf","ApexSeries","useMemo","optionsConfig","brushOptionsHelper","zoom","autoScaleYaxis","animations","title","opposite","now","transparentize","alpha","colorLib","rgbString","responsive","display","scales","xAxes","time","tooltipFormat","scaleLabel","labelString","yAxes","plugins","wheel","pinch","mode","pan","maintainAspectRatio","Chart","register","registerables","zoomPlugin","D3Line3","props","date","renderChartFn","dependencies","React","d3","current","useD3","svg","margin","node","clientWidth","clientHeight","append","attr","domain","d","range","call","deltha_max","forEach","lineFunc","marginRight","marginLeft","mapEventsToLineDevExtreme","listSeries","dicSensorData","dicAccumulated","String","includes","mergedSeries","BrushDevExtreme","initialState","startValue","endValue","visualRange","setVisualRange","Fragment","palette","dataSource","argumentField","valueField","argumentType","visible","horizontalAlignment","verticalAlignment","onValueChanged","e","left","minorTickCount","callValueChanged","mapEventsToRangeDevExtreme","RangeTime","barGroupPadding","rotated","categories","subtitle","rangeValue1Field","rangeValue2Field","barOverlapGroup","nameField","dataTimeLine","Event01","Event02","Event03","Event04","chartSeries","path","accSensor","TYPE_CHART_TIMELINE","chartLine","comfigMemo","copiedOpt","cloneDeep","Math","ceil","dataS","datasets","borderColor","backgroundColor","Utils","columns","dicTimeStamps","listData","mapEventsToC3Columns","c3Chart","c3","generate","bindto","xFormat","axis","localtime","tick","subchart","destroy","val","fontawesome","library","faCheckSquare","faCoffee","App","Navbar","bg","expand","Brand","href","src","logo","alt","aria-controls","Nav","Link","NavDropdown","Item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.607b390f.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Loading() {\n  return (\n    <div className=\"text-center\">\n      <FontAwesomeIcon\n        icon=\"spinner\"\n        spin\n        size=\"10x\"\n        className=\"text-primary\"\n      />\n      <h3 className=\"text-primary my-2\">LOADING ...</h3>\n    </div>\n  );\n}\nexport default Loading;\n","function sleepPromise(millisecond: number = 2000) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, millisecond);\n  });\n}\n\nexport default sleepPromise;\n","import moment from \"moment\";\nimport {\n  EventCommanderSensorData,\n  EventCommanderSensorDataRangeValue,\n  EventCommanderSensorRangeData,\n} from \"../models/events\";\n/**\n * Map list of EventCommanderSensorData to list of EventCommanderSensorRangeData\n * @param listSensorData\n * @param precision\n * @returns\n */\nfunction eventsToRangeEvents(\n  listSensorData: EventCommanderSensorData[],\n  precision: number = 12\n): EventCommanderSensorRangeData[] {\n  return listSensorData.map((sensorData) => {\n    const rangesValues = sensorData.values.reduce(\n      (listEventRange, itemEvent, index) => {\n        // first item\n        if (index === 0) {\n          return [\n            {\n              from: itemEvent.timestamp,\n              to: 0,\n              valid: itemEvent.valid,\n              acumulateValue: itemEvent.value,\n              items: 1,\n            },\n          ];\n        }\n        const previousEvent = sensorData.values[index - 1];\n        let lastEventRange = listEventRange[listEventRange.length - 1];\n\n        // each item\n        if (\n          lastEventRange.valid !== itemEvent.valid ||\n          !moment(previousEvent.timestamp)\n            // TODO: change seconds\n            .add(precision, \"seconds\")\n            .isSameOrAfter(itemEvent.timestamp)\n        ) {\n          lastEventRange.to = itemEvent.timestamp;\n          lastEventRange = {\n            from: itemEvent.timestamp,\n            to: 0,\n            valid: itemEvent.valid,\n            acumulateValue: itemEvent.value,\n            items: 1,\n          };\n          listEventRange.push(lastEventRange);\n        }\n        lastEventRange.acumulateValue += itemEvent.value;\n        lastEventRange.items += 1;\n\n        // last item\n        if (index === sensorData.values.length - 1) {\n          lastEventRange.to = itemEvent.timestamp;\n        }\n\n        return listEventRange;\n      },\n      [] as EventCommanderSensorDataRangeValue[]\n    );\n    return { ...sensorData, rangesValues };\n  });\n}\n\nexport default eventsToRangeEvents;\n","import moment, { months } from \"moment\";\nimport axios from \"axios\";\nimport sleepPromise from \"../../../shared/utils/mock/sleepPromise\";\nimport {\n  EventCommanderSensorData,\n  EventCommanderSensorRangeData,\n} from \"../models/events\";\nimport { FilterState } from \"../models/filters\";\nimport eventsToRangeEvents from \"./eventsToRangeEvents\";\n\nexport const API_URL = \"https://some-api.com/api/commander/events\";\n\n/**\n * API for SensorCommander\n */\nconst eventCommanderAPI = {\n  getEvents: (\n    filterState: FilterState\n  ): Promise<EventCommanderSensorRangeData[]> =>\n    sleepPromise(500)\n      .then(() => {\n        const baseRaw =\n          \"https://raw.githubusercontent.com/JuanSeBestia/stoerk-tronic-comander-challenge/e83dc62d678c18644c73c221339d9a7deda05fea/public/example_data/\";\n        switch (filterState.dates.relative) {\n          case \"month\":\n            return axios.get(baseRaw + \"sensorDataMonth.json\");\n          case \"week\":\n            return axios.get(baseRaw + \"sensorDataWeek.json\");\n          case \"day\":\n            return axios.get(baseRaw + \"sensorDataDay.json\");\n          case \"hour\":\n            return axios.get(baseRaw + \"sensorDataHour.json\");\n\n          default:\n            return axios.get(baseRaw + \"sensorDataHour.json\");\n        }\n      })\n      .then((data) => data.data as EventCommanderSensorData[])\n      // Filter dates\n      // .then((sensorData) =>\n      //   sensorData.map((sensor) => ({\n      //     ...sensor,\n      //     values: sensor.values.filter(\n      //       (value) =>\n      //         moment(filterState.dates.from).isSameOrBefore(\n      //           moment(value.timestamp)\n      //         ) &&\n      //         moment(filterState.dates.to).isSameOrAfter(\n      //           moment(value.timestamp)\n      //         )\n      //     ),\n      //   }))\n      // )\n      // TODO Filter components\n      // TODO Filter state\n      // Aggregate ranges\n      .then((data) => eventsToRangeEvents(data, 60 * 5))\n      .then((data) => {\n        console.log(\"eventCommanderAPI:\", { data });\n        return data;\n      }),\n};\nexport default eventCommanderAPI;\n","import { useState, useEffect } from \"react\";\nimport SeonsorCommanderAPI from \"../business-logic/eventCommanderAPI\";\nimport { EventCommanderSensorRangeData } from \"../models/events\";\nimport { FilterState } from \"../models/filters\";\n\nfunction useEventCommanderRange(filterState: FilterState) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<undefined | string>(undefined);\n  const [sensorDataRangeList, setSensorDataRangeList] = useState<\n    EventCommanderSensorRangeData[]\n  >([]);\n\n  useEffect(() => {\n    setLoading(true);\n    SeonsorCommanderAPI.getEvents(filterState)\n      .then(setSensorDataRangeList)\n      // .catch(setError)\n      .finally(() => setLoading(false));\n  }, [filterState]);\n\n  return {sensorDataRangeList, loading, error};\n}\nexport default useEventCommanderRange;\n","import { Moment } from \"moment\";\n\nexport enum EventComponentType {\n  DEVICE = \"DEVICE\",\n  COMPRESSOR = \"COMPRESSOR\",\n  FAN = \"FAN\",\n  LIGHT = \"LIGHT\",\n}\n\nexport enum EventStateType {\n  // pascal case for values according a challenge-2\n  ON = \"On\",\n  OFF = \"Off\",\n  INVALID = \"INVALID\",\n}\nexport interface EventCommanderSensorDataValue {\n  /** Date */\n  timestamp: number | Moment;\n  value: number;\n  valid: Boolean;\n}\nexport interface EventCommanderSensorDataRangeValue {\n  /** Date when start the state */\n  from: number | Moment;\n  /** Date when finish the state */\n  to: number | Moment;\n  acumulateValue: number;\n  items: number;\n  valid: Boolean;\n}\n\nexport interface EventCommanderSensorData {\n  /** Is a number in string like \"1008\",\"1009\" */\n  controlunit: string;\n  /** Pronuciable name like \"Régulateur 2, vitrine chocolat\" */\n  controlunitName: string;\n  /** Sensor ChanelCode like \"S01\",\"F04\" */\n  channel: string;\n  /** Magintude type of eache sensor */\n  unit: \"DEGREECELCIUS\" | \"PERCENT\";\n  values: EventCommanderSensorDataValue[];\n}\n\nexport interface EventCommanderSensorRangeData\n  extends EventCommanderSensorData {\n  rangesValues: EventCommanderSensorDataRangeValue[];\n}\n","import _ from \"lodash\";\nimport { ReactNode } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\n\nexport function toggleItem<T>(list: T[], item: T) {\n  const elementInList = list.find((itemList) => _.isEqual(item, itemList));\n  if (!!elementInList) {\n    return list.filter((itemList) => itemList !== elementInList);\n  }\n  return [...list, item];\n}\n\nexport function hasItem<T>(list: T[], item: T) {\n  const elementInList = list.find((itemList) => _.isEqual(item, itemList));\n  return !!elementInList;\n}\n\nexport interface MultipleChoseFormProps {\n  label?: ReactNode;\n  controlId: string;\n  options: { text: ReactNode; value: any; id: string; color?: string }[];\n  field: string[];\n  setField: (list: string[]) => void;\n}\n\nfunction MultipleChoseForm({\n  controlId,\n  field,\n  setField,\n  options,\n  label,\n}: MultipleChoseFormProps) {\n  return (\n    <Card.Body>\n      <Form.Group controlId={controlId}>\n        <Form.Label>{label}</Form.Label>\n        {options.map((item) => (\n          <Form.Check\n            key={item.id}\n            id={item.id}\n            type=\"checkbox\"\n            name={item.id}\n            label={item.text}\n            onChange={() => setField(toggleItem(field, item.value))}\n            checked={hasItem(field, item.value)}\n            style={\n              item.color\n                ? {\n                    color: item.color,\n                  }\n                : undefined\n            }\n          />\n        ))}\n      </Form.Group>\n    </Card.Body>\n  );\n}\nexport default MultipleChoseForm;\n","import React, { ReactNode } from \"react\";\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { FilterState } from \"../models/filters\";\n\nexport interface RelativeTimePickerProps {\n  labelFrom?: ReactNode;\n  labelTo?: ReactNode;\n  controlId: string;\n  field: FilterState[\"dates\"];\n  setField: (state: FilterState[\"dates\"]) => void;\n}\n\nfunction RelativeTimePicker({\n  controlId = \"RelativeTimePicker\",\n  field,\n  setField,\n}: RelativeTimePickerProps) {\n  const setRelative = (relative: FilterState[\"dates\"][\"relative\"]) =>\n    setField({ ...field, relative });\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setRelative(event.target.value as FilterState[\"dates\"][\"relative\"]);\n  };\n  return (\n    <FormControl variant=\"outlined\" className=\"w-100\">\n      <InputLabel id={`${controlId}-label`}>Date</InputLabel>\n      <Select\n        labelId={`${controlId}-label`}\n        id={`${controlId}`}\n        value={field}\n        onChange={handleChange}\n        label=\"Date ago\"\n      >\n        <MenuItem value={\"hour\"}>Hour ago</MenuItem>\n        <MenuItem value={\"day\"}>24 hours</MenuItem>\n        <MenuItem value={\"week\"}>Week ago</MenuItem>\n        <MenuItem value={\"month\"}>Month ago</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\nexport default RelativeTimePicker;\n","import _ from \"lodash\";\nimport { useRef } from \"react\";\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\n\nimport { EventComponentType, EventStateType } from \"../models/events\";\nimport MultipleChoseForm, { MultipleChoseFormProps } from \"./MultipleChoseForm\";\nimport RangeDateTimePicker from \"./RangeDateTimePicker\";\nimport { FilterState } from \"../models/filters\";\nimport { COLORS } from \"./Charts/chart.model\";\nimport RelativeTimePicker from \"./RelativeTimePicker\";\nexport interface FilterProps {\n  filterState: FilterState;\n  setFilterState: (state: FilterState) => void;\n  componentsOptions: MultipleChoseFormProps[\"options\"];\n}\n\nexport enum FilterTypes {\n  COMPONENTS = \"COMPONENTS\",\n  STATES = \"STATES\",\n  DATES = \"DATES\",\n}\n\nfunction Filters({\n  filterState,\n  setFilterState,\n  componentsOptions,\n}: FilterProps) {\n  const refForm = useRef<HTMLFormElement | null>(null);\n  const { components, states, dates } = filterState;\n  const setComponents = (components: string[]) =>\n    setFilterState({ ...filterState, components });\n  const setStates = (states: string[]) =>\n    setFilterState({ ...filterState, states });\n  const setDates = (dates: FilterState[\"dates\"]) =>\n    setFilterState({ ...filterState, dates });\n  return (\n    <Form ref={refForm}>\n      <Accordion>\n        <Card>\n          <Card.Header className=\"d-flex flex-row justify-content-between align-items-center\">\n            <h3 className=\"text-primary\">Select filter</h3>\n            <div>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.COMPONENTS}\n                size=\"lg\"\n              >\n                Components\n              </Accordion.Toggle>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.STATES}\n                size=\"lg\"\n              >\n                States\n              </Accordion.Toggle>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.DATES}\n                size=\"lg\"\n              >\n                Dates\n              </Accordion.Toggle>\n            </div>\n          </Card.Header>\n          <Accordion.Collapse eventKey={FilterTypes.COMPONENTS}>\n            <Card.Body>\n              <MultipleChoseForm\n                controlId=\"components\"\n                options={componentsOptions}\n                label=\"Select components\"\n                setField={setComponents}\n                field={components}\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n          <Accordion.Collapse eventKey={FilterTypes.STATES}>\n            <Card.Body>\n              <MultipleChoseForm\n                controlId=\"states\"\n                options={statesOptions}\n                label=\"Select states\"\n                setField={setStates}\n                field={states}\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n          <Accordion.Collapse eventKey={FilterTypes.DATES}>\n            <Card.Body>\n              {/* <RangeDateTimePicker\n                controlId=\"dates\"\n                field={dates}\n                setField={setDates}\n                labelFrom=\"Start date\"\n                labelTo=\"Final date\"\n              /> */}\n              <RelativeTimePicker\n                controlId=\"relative-date\"\n                field={dates}\n                setField={setDates}\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    </Form>\n  );\n}\nconst statesOptions: MultipleChoseFormProps[\"options\"] = Object.values(\n  EventStateType\n).map((value) => ({\n  text: value,\n  value,\n  id: value,\n}));\nexport default Filters;\n","import { SomeComponent } from \"../../models/react\";\n\nexport interface ChartProps {\n  data: any[];\n}\n\nexport interface ChartsItem {\n  name: string;\n  path: string;\n  ChartComponent: SomeComponent<ChartProps>;\n}\n\nexport const OFF_COLOR = \"#75757533\";\nexport const DEVICE_COLOR = `#5189C8`;\nexport const COMPRESSOR_COLOR = `#8973D6`;\nexport const FAN_COLOR = `#F2BB38`;\nexport const LIGHT_COLOR = `#72E8A7`;\n\nexport const COLORS = [\n  \"#A54ED5\",\n  \"#EE4F8D\",\n  \"#FF9055\",\n  \"#79EC4F\",\n  \"#FFEB55\",\n  \"#246CAC\",\n  \"#582AB5\",\n  \"#FFDA25\",\n  \"#6D25B3\",\n  \"#3C30B8\",\n  \"#DE206D\",\n];\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nimport \"./Commander.scss\";\n\nimport Loading from \"../../shared/components/Loading\";\nimport useEventCommanderRange from \"./state/useEventCommanderRange\";\nimport { EventComponentType, EventStateType } from \"./models/events\";\nimport Filters, { FilterProps } from \"./components/Filters\";\nimport { FilterState } from \"./models/filters\";\nimport moment from \"moment\";\nimport { ChartProps, COLORS } from \"./components/Charts/chart.model\";\nimport { SomeComponent } from \"./models/react\";\n\nexport const initialFilterState: FilterState = {\n  components: [],\n  states: Object.values(EventStateType),\n  dates: { from: moment().add(-10, \"days\"), to: moment() },\n};\nexport interface CommanderProps {\n  ChartComponent: SomeComponent<ChartProps>;\n}\nfunction Commander({ ChartComponent }: CommanderProps) {\n  const [filterState, setFilterState] =\n    useState<FilterState>(initialFilterState);\n\n  const { sensorDataRangeList, loading, error } =\n    useEventCommanderRange(filterState);\n  const [componentsOptions, setComponentsOptions] =\n    useState<FilterProps['componentsOptions']>([]);\n\n  useEffect(() => {\n    const options = sensorDataRangeList.map((sensor, index) => ({\n      text: `${sensor.controlunit}-${sensor.channel}: ${sensor.controlunitName}`,\n      value: sensor,\n      id: `${sensor.controlunit}-${sensor.channel}`,\n      color: COLORS[index],\n    }));\n    setComponentsOptions(options);\n  }, []);\n\n  return (\n    <div className=\"Commander\">\n      <h1 className=\"text-primary text-center my-5\">\n        Commander: Example Comander\n      </h1>\n      <Card className=\"m-sm-3\">\n        <div>\n          <Filters\n            filterState={filterState}\n            setFilterState={setFilterState}\n            componentsOptions={componentsOptions}\n          />\n        </div>\n        <div id=\"chart\">\n          {loading ? (\n            <Loading />\n          ) : (\n            <ChartComponent data={sensorDataRangeList} />\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default Commander;\n","export default __webpack_public_path__ + \"static/media/logo-stor.89e05a91.jpeg\";","import moment from \"moment\";\n\nconst DATE_FORMAT = \"MMM DD HH:mm:ss\";\nconst STATE_COLORS: Record<string, string> = {\n  On: \"green\",\n  INVALID: \"red\",\n  Off: \"gray\",\n};\n\nfunction diffDateFormat(from: moment.MomentInput, to: moment.MomentInput) {\n  var a = moment(from);\n  var b = moment(to);\n  var diff = b.diff(a, \"hours\");\n  // TODO: support I18n\n  // TODO: support minutes, hours, days\n  return \"for \" + diff + (diff > 1 ? \" hours\" : \" hour\");\n}\n// extracted from https://github.com/apexcharts/apexcharts.js/blob/a2ce1b8640626a1434248cd536d81f51de389762/src/charts/RangeBar.js#L403\nfunction buildCustomTooltipHTML({\n  color,\n  seriesName,\n  ylabel,\n  start,\n  end,\n  diff,\n}: any) {\n  const ylabelColor = STATE_COLORS[ylabel];\n  return (\n    '<div class=\"apexcharts-tooltip-rangebar\">' +\n    '<div> <span class=\"series-name\" style=\"color: ' +\n    color +\n    '\">' +\n    (seriesName ? seriesName : \"\") +\n    '<span style=\"color:' +\n    ylabelColor +\n    ';\"> : ' +\n    ylabel +\n    \" <span> (\" +\n    diff +\n    \")</span></span></span></div>\" +\n    \"<div>\" +\n    '<span class=\"value start-value\">' +\n    start +\n    '</span> <span class=\"separator\">-</span> <span class=\"value end-value\">' +\n    end +\n    \"</span></div>\" +\n    \"</div>\"\n  );\n}\n\nconst options = {\n  chart: {\n    height: 350,\n  },\n  plotOptions: {\n    bar: {\n      horizontal: true,\n      distributed: true,\n      barHeight: \"90%\",\n      dataLabels: {\n        hideOverflowingLabels: false,\n      },\n    },\n  },\n  dataLabels: {\n    enabled: false,\n    // has a bug\n    // formatter: function (val: [start: number, end: number], opts: any) {\n    //   var a = moment(val[0]);\n    //   var b = moment(val[1]);\n    //   var diff = b.diff(a, \"hours\");\n    //   // TODO: support I18n\n    //   return diff + (diff > 1 ? \" hours\" : \" hours\");\n    // },\n    // style: {\n    //   colors: [\"#f3f4f5\", \"#fff\"],\n    //   height: 800,\n    // },\n  },\n  xaxis: {\n    type: \"datetime\",\n  },\n  yaxis: {\n    show: true,\n  },\n  tooltip: {\n    x: {\n      show: false,\n      format: \"dd MMM HH:mm\",\n    },\n    y: {\n      show: false,\n    },\n    custom: function (data: any) {\n      const { series, seriesIndex, dataPointIndex, w } = data;\n      // extracted from https://github.com/apexcharts/apexcharts.js/blob/a2ce1b8640626a1434248cd536d81f51de389762/src/charts/RangeBar.js#L12\n      const color = w.globals.colors[seriesIndex];\n      const seriesName = w.config.series[seriesIndex].data[dataPointIndex].x;\n      const state = w.config.series[seriesIndex].data[dataPointIndex].state;\n      const ylabel = state;\n      const start = moment(\n        w.globals.seriesRangeStart[seriesIndex][dataPointIndex]\n      ).format(DATE_FORMAT);\n      const end = moment(\n        w.globals.seriesRangeEnd[seriesIndex][dataPointIndex]\n      ).format(DATE_FORMAT);\n      const diff = diffDateFormat(\n        w.globals.seriesRangeStart[seriesIndex][dataPointIndex],\n        w.globals.seriesRangeEnd[seriesIndex][dataPointIndex]\n      );\n      return buildCustomTooltipHTML({\n        color,\n        seriesName,\n        ylabel,\n        start,\n        end,\n        diff,\n      });\n      return (\n        '<div class=\"arrow_box\">' +\n        \"<span>\" +\n        series[seriesIndex][dataPointIndex] +\n        \"</span>\" +\n        \"</div>\"\n      );\n    },\n  },\n  grid: {\n    row: {\n      colors: [\"#f3f4f5\", \"#fff\"],\n      opacity: 0.5,\n    },\n  },\n};\n\nexport default options;\n","import moment from \"moment\";\nimport _ from \"lodash\";\nimport {\n  EventCommanderSensorRangeData,\n  EventStateType,\n  // EventCommanderRange,\n} from \"../../../models/events\";\nimport { COLORS } from \"../chart.model\";\nimport { TimeLineApexChart } from \"./TimeLineApexcharts.model\";\n\nconst mockDates = [\n  {\n    x: \"02-10-2017 GMT\",\n    y: 34,\n  },\n  {\n    x: \"02-11-2017 GMT\",\n    y: 43,\n  },\n  {\n    x: \"02-12-2017 GMT\",\n    y: 31,\n  },\n  {\n    x: \"02-13-2017 GMT\",\n    y: 43,\n  },\n  {\n    x: \"02-14-2017 GMT\",\n    y: 33,\n  },\n  {\n    x: \"02-15-2017 GMT\",\n    y: 52,\n  },\n];\nfunction mapEventToSeriesApexTimeLineChart(\n  listSensors: EventCommanderSensorRangeData[]\n){\n  return listSensors.map((sensor, indexSensor) => ({\n    name: `${sensor.controlunit}-${sensor.channel}`,\n    unit: sensor.unit,\n    // data: mockDates\n    data: sensor.values.map((event) => ({\n      x: event.timestamp as number,\n      y: event.value,\n      fillColor: event.valid ? COLORS[indexSensor] : COLORS[indexSensor] + \"66\",\n      state: event.valid ? EventStateType.ON : EventStateType.INVALID,\n    })),\n    // data: sensor.values.map((event) => ({\n    //   x: event.timestamp,\n    //   y: event.value,\n    //   // fillColor: event.valid ? COLORS[indexSensor] : COLORS[indexSensor] + \"66\",\n    //   // state: event.valid ? EventStateType.ON : EventStateType.INVALID,\n    // })),\n  }));\n}\nexport default mapEventToSeriesApexTimeLineChart;\n\nfunction sampleOrdered<T>(list: T[], size: number) {\n  const sampleTime = Math.floor(list.length / size);\n  return list.filter((item, index) => index % sampleTime == 0);\n}\n","import ReactApexChart from \"react-apexcharts\";\nimport _ from \"lodash\"\nimport { ChartProps } from \"../../chart.model\";\nimport options from \"../config\";\nimport React, { useMemo } from \"react\";\nimport { BurstMode } from \"@material-ui/icons\";\nimport mapEventToSeriesApexTimeLineChart from \"../mapEventToSeriesApexBrushChart\";\n\nconst optionsLine = {\n  chart: {\n    id: \"chart1\",\n    height: 130,\n    type: \"area\",\n    brush: {\n      target: \"chart2\",\n      enabled: true,\n    },\n    selection: {\n      enabled: true,\n      xaxis: {\n        min: new Date(\"10 May 2021\").getTime(),\n        max: new Date(\"21 May 2021\").getTime(),\n      },\n    },\n  },\n  // colors: [\"#008FFB\"],\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      opacityFrom: 0.91,\n      opacityTo: 0.1,\n    },\n  },\n  xaxis: {\n    type: \"datetime\",\n    tooltip: {\n      enabled: false,\n    },\n  },\n  yaxis: {\n    tickAmount: 2,\n  },\n};\nconst brushOptions = {\n  ...options,\n\n  chart: {\n    id: \"chart2\",\n    type: \"line\",\n    height: 230,\n    toolbar: {\n      autoSelected: \"pan\",\n      show: false,\n    },\n  },\n  // colors: [\"#546E7A\"],\n  stroke: {\n    width: 3,\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  fill: {\n    opacity: 1,\n  },\n  markers: {\n    size: 0,\n  },\n  xaxis: {\n    type: \"datetime\",\n  },\n  tooltip: {\n    shared: true,\n    // y: {\n    //   formatter: function (val: any, another: any, ss: any) {\n    //     console.log(val, another, ss);\n    //     return val;\n    //   },\n    // },\n  },\n};\n\nexport default function ApexBrush({ data }: ChartProps) {\n  const series = useMemo(() => mapEventToSeriesApexTimeLineChart(data), [data]);\n  const comfigMemo = useMemo(() => {\n    const copiedOpt = _.cloneDeep(optionsLine)\n    copiedOpt.chart.selection.xaxis.max = series[0].data[Math.ceil(series[0].data.length/4*3)].x\n    copiedOpt.chart.selection.xaxis.min = series[0].data[Math.ceil(series[0].data.length/4*1)].x\n    return copiedOpt\n  }, [series]);\n  console.log({ series });\n\n  return (\n    <div id=\"wrapper\">\n      <div id=\"chart-line2\">\n        <ReactApexChart\n          options={brushOptions}\n          series={series}\n          type=\"line\"\n          height={500}\n        />\n      </div>\n      <div id=\"chart-line\">\n        <ReactApexChart\n          options={comfigMemo}\n          series={series}\n          type=\"area\"\n          height={130}\n        />\n      </div>\n    </div>\n  );\n}\n","import moment from \"moment\";\nimport {\n  EventCommanderSensorRangeData,\n  EventStateType,\n  // EventCommanderRange,\n} from \"../../../../models/events\";\nimport { COLORS } from \"../../chart.model\";\nimport { SeriesApexChart } from \"./seriesApexcharts.model\";\n\nfunction rangeEventsToApexchartSeries(\n  listSensors: EventCommanderSensorRangeData[]\n): SeriesApexChart[] {\n  return listSensors.flatMap((sensor, indexSensor) =>\n    sensor.rangesValues.map((event) => ({\n      x: `${sensor.controlunit}-${sensor.channel}`,\n      y: [moment(event.from).valueOf(), moment(event.to).valueOf()],\n      fillColor: event.valid ? COLORS[indexSensor] : COLORS[indexSensor] + \"66\",\n      state: event.valid ? EventStateType.ON : EventStateType.INVALID,\n    }))\n  );\n}\nexport default rangeEventsToApexchartSeries;\n","import ReactApexChart from \"react-apexcharts\";\nimport { ChartProps } from \"../../chart.model\";\nimport optionsConfig from \"../config\";\nimport React, { useMemo } from \"react\";\nimport rangeEventsToApexchartSeries from \"./rangeEventsToApexchartSeries\";\n\nexport default function ApexSeries({\n  data,\n  options,\n}: ChartProps & { options?: any }) {\n  const series = useMemo(() => rangeEventsToApexchartSeries(data), [data]);\n  console.log({ series });\n\n  return (\n    <ReactApexChart\n      options={{ ...optionsConfig, ...options }}\n      series={[{ data: series }]}\n      type=\"rangeBar\"\n      height={500}\n    />\n  );\n}\n","import ReactApexChart from \"react-apexcharts\";\nimport _ from \"lodash\";\nimport { ChartProps } from \"../../chart.model\";\nimport options from \"../config\";\nimport React, { useMemo } from \"react\";\nimport { BurstMode } from \"@material-ui/icons\";\nimport mapEventToSeriesApexTimeLineChart from \"../mapEventToSeriesApexBrushChart\";\nimport ApexSeries from \"../ApexSeries\";\n\nconst brushOptionsHelper = {\n  chart: {\n    id: \"chart1\",\n    height: 130,\n    type: \"area\",\n    brush: {\n      target: \"chart2\",\n      enabled: true,\n    },\n    selection: {\n      enabled: true,\n      xaxis: {\n        min: new Date(\"10 May 2021\").getTime(),\n        max: new Date(\"21 May 2021\").getTime(),\n      },\n    },\n  },\n  // colors: [\"#008FFB\"],\n  // fill: {\n  //   type: \"gradient\",\n  //   gradient: {\n  //     opacityFrom: 0.91,\n  //     opacityTo: 0.1,\n  //   },\n  // },\n  // xaxis: {\n  //   type: \"datetime\",\n  //   tooltip: {\n  //     enabled: false,\n  //   },\n  // },\n  // yaxis: {\n  //   tickAmount: 2,\n  // },\n};\nconst brushOptions = {\n  ...options,\n\n  chart: {\n    id: \"chart2\",\n    type: \"line\",\n    height: 230,\n    toolbar: {\n      autoSelected: \"pan\",\n      show: false,\n    },\n  },\n  // colors: [\"#546E7A\"],\n  stroke: {\n    width: 3,\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  fill: {\n    opacity: 1,\n  },\n  markers: {\n    size: 0,\n  },\n  xaxis: {\n    type: \"datetime\",\n  },\n  tooltip: {\n    shared: true,\n    // y: {\n    //   formatter: function (val: any, another: any, ss: any) {\n    //     console.log(val, another, ss);\n    //     return val;\n    //   },\n    // },\n  },\n};\n\nexport default function ApexBrushWithRange({ data }: ChartProps) {\n  const series = useMemo(() => mapEventToSeriesApexTimeLineChart(data), [data]);\n  const comfigMemo = useMemo(() => {\n    const copiedOpt = _.cloneDeep(brushOptionsHelper);\n    copiedOpt.chart.selection.xaxis.max =\n      series[0].data[Math.ceil((series[0].data.length / 4) * 3)].x;\n    copiedOpt.chart.selection.xaxis.min =\n      series[0].data[Math.ceil((series[0].data.length / 4) * 1)].x;\n    return copiedOpt;\n  }, [series]);\n  console.log({ series });\n\n  return (\n    <div id=\"wrapper\">\n      <div id=\"chart-line2\">\n        <ReactApexChart\n          options={brushOptions}\n          series={series}\n          type=\"line\"\n          height={500}\n        />\n      </div>\n      <div id=\"chart-line\">\n        {/* <ReactApexChart\n          options={comfigMemo}\n          series={series}\n          type=\"area\"\n          height={130}\n        /> */}\n\n        <ApexSeries\n          data={data}\n          options={comfigMemo}\n        />\n      </div>\n    </div>\n  );\n}\n","import ReactApexChart from \"react-apexcharts\";\nimport { ChartProps } from \"../../chart.model\";\nimport options from \"../config\";\nimport React, { useMemo } from \"react\";\nimport mapEventToSeriesApexTimeLineChart from \"../mapEventToSeriesApexBrushChart\";\n\nconst optionsLine = {\n  // ...options,\n\n  chart: {\n    id: \"chart1\",\n    height: 130,\n    type: \"line\",\n    zoom: {\n      type: \"x\",\n      enabled: true,\n      autoScaleYaxis: true,\n    },\n    toolbar: {\n      autoSelected: \"zoom\",\n    },\n  },\n  // colors: [\"#008FFB\"],\n  dataLabels: {\n    enabled: false,\n  },\n  xaxis: {\n    type: \"datetime\",\n    \n  },\n//   yaxis: [\n//   {\n//     title: {\n//       text: \"Series A\"\n//     },\n//   },\n//   {\n//     opposite: true,\n//     title: {\n//       text: \"Series B\"\n//     }\n//   }\n// ],\n};\n\nexport default function ApexLine({ data }: ChartProps) {\n  const series = useMemo(() => mapEventToSeriesApexTimeLineChart(data), [data]);\n  console.log({ series });\n\n  return (\n    <ReactApexChart\n      options={optionsLine}\n      series={series}\n      type=\"line\"\n      height={500}\n    />\n  );\n}\n","import ReactApexChart from \"react-apexcharts\";\nimport { ChartProps } from \"../../chart.model\";\nimport options from \"../config\";\nimport React, { useMemo } from \"react\";\nimport mapEventToSeriesApexTimeLineChart from \"../mapEventToSeriesApexBrushChart\";\n\nconst optionsLine = {\n  // ...options,\n\n  chart: {\n    animations: {\n      enabled: false,\n    },\n    id: \"chart1\",\n    height: 130,\n    type: \"line\",\n    zoom: {\n      type: \"x\",\n      enabled: true,\n      autoScaleYaxis: true,\n    },\n    toolbar: {\n      autoSelected: \"zoom\",\n    },\n  },\n  // colors: [\"#008FFB\"],\n  dataLabels: {\n    enabled: false,\n  },\n  xaxis: {\n    type: \"datetime\",\n  },\n  yaxis: [\n    {\n      title: {\n        text: \"Celcius (Cº)\",\n      },\n    },\n    {\n      opposite: true,\n      title: {\n        text: \"Percent (%)\",\n      },\n    },\n  ],\n};\n\nexport default function ApexLineTwoAxies({ data }: ChartProps) {\n  const series = useMemo(() => mapEventToSeriesApexTimeLineChart(data), [data]);\n  console.log({ series });\n\n  return (\n    <ReactApexChart\n      options={optionsLine}\n      series={series}\n      type=\"line\"\n      height={500}\n    />\n  );\n}\n","import colorLib, { RGBA, Color } from \"@kurkle/color\";\n\n// Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\nvar _seed = Date.now();\n\nexport function srand(seed: number) {\n  _seed = seed;\n}\n\nexport function rand(min: number, max: number) {\n    min = valueOrDefault(min, 0);\n    max = valueOrDefault(max, 0);\n    _seed = (_seed * 9301 + 49297) % 233280;\n    return min + (_seed / 233280) * (max - min);\n  }\n\nconst COLORS = [\n  \"#4dc9f6\",\n  \"#f67019\",\n  \"#f53794\",\n  \"#537bc4\",\n  \"#acc236\",\n  \"#166a8f\",\n  \"#00a950\",\n  \"#58595b\",\n  \"#8549ba\",\n];\n\nexport function color(index: number) {\n  return COLORS[index % COLORS.length];\n}\n\nexport function transparentize(\n  value: string | number[] | Color | RGBA,\n  opacity: number\n) {\n  var alpha = opacity === undefined ? 0.5 : 1 - opacity;\n  return colorLib(value).alpha(alpha).rgbString();\n}\n\nexport const CHART_COLORS = {\n  red: \"rgb(255, 99, 132)\",\n  orange: \"rgb(255, 159, 64)\",\n  yellow: \"rgb(255, 205, 86)\",\n  green: \"rgb(75, 192, 192)\",\n  blue: \"rgb(54, 162, 235)\",\n  purple: \"rgb(153, 102, 255)\",\n  grey: \"rgb(201, 203, 207)\",\n};\n\nconst NAMED_COLORS = [\n  CHART_COLORS.red,\n  CHART_COLORS.orange,\n  CHART_COLORS.yellow,\n  CHART_COLORS.green,\n  CHART_COLORS.blue,\n  CHART_COLORS.purple,\n  CHART_COLORS.grey,\n];\n\nexport function namedColor(index: number) {\n  return NAMED_COLORS[index % NAMED_COLORS.length];\n}\n\nfunction valueOrDefault<T>(value: T, defaultValue: T) {\n  return value ? value : defaultValue;\n}\nexport function numbers(this: any, config: any) {\n  var cfg = config || {};\n  var min = valueOrDefault(cfg.min, 0);\n  var max = valueOrDefault(cfg.max, 100);\n  var from = valueOrDefault(cfg.from, []);\n  var count = valueOrDefault(cfg.count, 8);\n  var decimals = valueOrDefault(cfg.decimals, 8);\n  var continuity = valueOrDefault(cfg.continuity, 1);\n  var dfactor = Math.pow(10, decimals) || 0;\n  var data = [];\n  var i, value;\n\n  for (i = 0; i < count; ++i) {\n    value = (from[i] || 0) + this.rand(min, max);\n    if (this.rand() <= continuity) {\n      data.push(Math.round(dfactor * value) / dfactor);\n    } else {\n      data.push(null);\n    }\n  }\n\n  return data;\n}\n","import React, { useMemo } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { ChartProps } from \"../chart.model\";\nimport { mapEventsToDataSetsChartJs } from \"./mapEventsToDataSetsChartJs\";\nimport * as Utils from \"./Util\";\n\nconst DATA_COUNT = 7;\nconst NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };\n\nvar timeFormat = \"DD/MM/YYYY\";\nconst options = {\n  responsive: true,\n  title: {\n    display: true,\n    text: \"Chart.js Time Scale\",\n  },\n  scales: {\n    xAxes: {\n      type: \"time\",\n      time: {\n        format: timeFormat,\n        tooltipFormat: \"ll\",\n      },\n      scaleLabel: {\n        display: true,\n        labelString: \"Date\",\n      },\n    },\n\n    yAxes: [\n      {\n        scaleLabel: {\n          display: true,\n          labelString: \"value\",\n        },\n      },\n    ],\n  },\n  // interaction: {\n  //   mode: \"index\",\n  //   intersect: false,\n  // },\n  // stacked: false,\n  // scales: {\n  //   xAxes: [\n  //     {\n  //       type: \"time\",\n  //       time: {\n  //         format: \"ll\",\n  //         tooltipFormat: \"ll\",\n  //       },\n  //       scaleLabel: {\n  //         display: true,\n  //         labelString: \"Date\",\n  //       },\n  //     },\n  //   ],\n  //   // y: {\n  //   //   type: \"linear\",\n  //   //   title: \"Celcius (Cº)\",\n  //   //   display: true,\n  //   //   position: \"left\",\n  //   // },\n  //   // y1: {\n  //   //   type: \"linear\",\n  //   //   title: \"Percent (%)\",\n  //   //   display: true,\n  //   //   position: \"right\",\n\n  //   //   // grid line settings\n  //   //   grid: {\n  //   //     drawOnChartArea: false, // only want the grid lines for one axis to show up\n  //   //   },\n  //   // },\n  // },\n\n  plugins: {\n    title: {\n      display: true,\n      text: \"Chart.js Line Chart - Multi Axis\",\n    },\n    zoom: {\n      zoom: {\n        wheel: {\n          enabled: true,\n        },\n        pinch: {\n          enabled: true,\n        },\n        mode: \"x\",\n      },\n      pan: {\n        enabled: true,\n        mode: \"x\",\n      },\n    },\n  },\n  maintainAspectRatio: false,\n};\n\nexport const MultiAxisLine = ({ data }: ChartProps) => {\n  const series = useMemo(() => mapEventsToDataSetsChartJs(data), [data]);\n  const dataS = {\n    datasets: series,\n    // labels: series[0].data.map((item, index) => index),\n  };\n  console.log({ dataS });\n\n  return (\n    <div style={{ height: 300 }}>\n      <Line\n        data={dataS}\n        width={100}\n        height={300}\n        options={options}\n        type=\"line\"\n      />\n    </div>\n  );\n};\n","import { Chart, registerables } from \"chart.js\";\nimport zoomPlugin from \"chartjs-plugin-zoom\";\nimport 'chartjs-adapter-moment';\nexport { MultiAxisLine } from \"./MultiAxisLine\";\nexport * as Utils from \"./Util\";\n\nChart.register(...registerables);\nChart.register(zoomPlugin);\n","import React, { useMemo, useState } from \"react\";\nimport c3 from \"c3\";\nimport { ChartProps } from \"../../chart.model\";\nimport { mapEventsToC3Columns } from \"./mapEventsToC3Columns\";\n\nexport const C3LineBrush = ({ data }: ChartProps) => {\n  const columns = useMemo(() => mapEventsToC3Columns(data), [data]);\n\n  React.useEffect(() => {\n    const c3Chart = c3.generate({\n      bindto: \"#chart-c3\",\n      data: {\n        x: \"x\",\n        xFormat: \"%Y\",\n        columns: columns,\n      },\n      axis: {\n        x: {\n          type: \"timeseries\",\n          // if true, treat x value as localtime (Default)\n          // if false, convert to UTC internally\n          localtime: false,\n          tick: {\n            format: \"%Y-%m-%d %H:%M:%S\",\n          },\n        },\n      },\n      subchart: {\n        show: true,\n      },\n    });\n    return () => {\n      c3Chart?.destroy();\n    };\n  }, [columns]);\n  return <div id=\"chart-c3\" />;\n};\n","import React, { useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"./useD3\";\nimport { appl } from \"./data/appl\";\nimport { mapsEventsToD3 } from \"./mapsEventsToD3\";\n\n// const data = appl.map((item) => ({ ...item, dateDate: new Date(item.date) }));\n\nconst D3Line3 = (props) => {\n  const series = useMemo(() => mapsEventsToD3(props.data), [props.data]);\n  const data = series[0].values;\n  const ref = useD3((svg) => {\n    // set the dimensions and margins of the graph\n    var margin = { top: 10, right: 30, bottom: 30, left: 60 },\n      width = svg.node().clientWidth - margin.left - margin.right,\n      height = svg.node().clientHeight - margin.top - margin.bottom;\n    // append the svg object to the body of the page\n    svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Add X axis --> it is a date format\n    var x = d3\n      .scaleTime()\n      .domain(\n        d3.extent(data, function (d) {\n          return d.date;\n        })\n      )\n      .range([margin.left, width]);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var min = d3.min(\n      series.map((sensor) =>\n        d3.min(sensor.values, function (d) {\n          return d.value;\n        })\n      )\n    );\n    var max = d3.max(\n      series.map((sensor) =>\n        d3.max(sensor.values, function (d) {\n          return d.value;\n        })\n      )\n    );\n\n    var deltha_max = max - min;\n\n    var y = d3\n      .scaleLinear()\n      .domain([min - 0.1 * deltha_max, max + 0.1 * deltha_max])\n      .range([height, 0]);\n    svg\n      .append(\"g\")\n      .call(d3.axisLeft(y))\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + 0 + \")\");\n\n    // Add the line\n\n    series.forEach((sensor) => {\n      var lineFunc = d3\n        .line()\n        .x(function (d) {\n          return x(d.date);\n        })\n        .y(function (d) {\n          return y(d.value);\n        });\n      svg\n        .append(\"path\")\n        .attr(\"d\", lineFunc(sensor.values))\n        .attr(\"stroke\", sensor.color)\n        .attr(\"fill\", \"none\");\n    });\n  }, []);\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"20px\",\n        marginLeft: \"20px\",\n      }}\n    ></svg>\n  );\n};\n\nexport default D3Line3;\n","import { EventCommanderSensorRangeData } from \"../../../../models/events\";\nimport { COLORS } from \"../../chart.model\";\n\n\nexport function mapsEventsToD3(listSensors: EventCommanderSensorRangeData[]) {\n  return listSensors.map((sensor, indexSensor) => ({\n    name: `${sensor.controlunit}-${sensor.channel}`,\n    color: COLORS[indexSensor],\n    values: sensor.values.map((event) => ({\n      date: new Date(event.timestamp as number),\n      value: event.value,\n    })),\n  }));\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (\n  renderChartFn: (args:any)=>any,\n  dependencies: React.DependencyList | undefined\n) => {\n  const ref = React.useRef<any>();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n  return ref;\n};\n","import { BaseChartOptions } from \"devextreme/viz/chart_components/base_chart\";\n\nimport moment from \"moment\";\nimport {\n  EventCommanderSensorRangeData,\n  EventStateType,\n} from \"../../../models/events\";\n\nfunction mapEventsToLineDevExtreme(\n  listSensors: EventCommanderSensorRangeData[]\n) {\n  const listSeries: string[] = [];\n  const dicSensorData = listSensors.reduce(\n    (dicAccumulated, sensor, indexSensor) => {\n      sensor.values.forEach((event) => {\n        // Merge data\n        if (!dicAccumulated[String(event.timestamp)]) {\n          dicAccumulated[String(event.timestamp)] = {\n            timestamp: new Date(event.timestamp as number),\n          };\n        }\n        dicAccumulated[String(event.timestamp)][\n          `state-${sensor.controlunit}-${sensor.channel}`\n        ] = event.valid ? EventStateType.ON : EventStateType.INVALID;\n        dicAccumulated[String(event.timestamp)][\n          `value-${sensor.controlunit}-${sensor.channel}`\n        ] = event.value\n\n        // ListKeyValues\n        if (\n          !listSeries.includes(`value-${sensor.controlunit}-${sensor.channel}`)\n        )\n          listSeries.push(`value-${sensor.controlunit}-${sensor.channel}`);\n\n        return;\n      });\n      return dicAccumulated;\n    },\n    {} as any\n  );\n  return {\n    mergedSeries: Object.values(dicSensorData) as any[],\n    listSeries,\n  };\n}\nexport default mapEventsToLineDevExtreme;\n","import React, { useMemo, useState } from \"react\";\n\nimport Chart, {\n  Series,\n  Legend,\n  CommonSeriesSettings,\n  Point,\n  ArgumentAxis,\n} from \"devextreme-react/chart\";\n\nimport RangeSelector, {\n  Size,\n  Chart as ChartOptions,\n  Margin,\n  Scale,\n  Behavior,\n} from \"devextreme-react/range-selector\";\nimport mapEventsToLineDevExtreme from \"../mapEventsToLineDevExtreme\";\nimport { ChartProps } from \"../../chart.model\";\n\nfunction BrushDevExtreme({ data }: ChartProps) {\n  const { listSeries, mergedSeries } = useMemo(\n    () => mapEventsToLineDevExtreme(data),\n    [data]\n  );\n\n  const initialState = useMemo(\n    () => ({\n      startValue: mergedSeries[0].timestamp,\n      endValue: mergedSeries[mergedSeries.length - 1].timestamp,\n    }),\n    [mergedSeries]\n  );\n\n  const [visualRange, setVisualRange] = useState(initialState);\n\n  console.log({ listSeries, mergedSeries });\n\n  return (\n    <React.Fragment>\n      <Chart id=\"zoomedChart\" palette=\"Material\" dataSource={mergedSeries}>\n        {listSeries.map((item) => (\n          <Series key={item} argumentField=\"timestamp\" valueField={item} />\n        ))}\n\n        <ArgumentAxis\n          visualRange={visualRange}\n          argumentType=\"datetime\"\n          label={{ format: \"shortTime\" }}\n        />\n        <Legend\n          visible={true}\n          horizontalAlignment=\"center\"\n          verticalAlignment=\"bottom\"\n        />\n        <CommonSeriesSettings>\n          <Point size={7} />\n        </CommonSeriesSettings>\n      </Chart>\n      <RangeSelector\n        dataSource={mergedSeries}\n        onValueChanged={(e) => setVisualRange(e.value as any)}\n      >\n        <Size height={120} />\n        <Margin left={10} />\n        <Scale minorTickCount={1} {...initialState} />\n        <ChartOptions palette=\"Material\">\n          <Behavior callValueChanged=\"onMoving\" />\n          <Legend visible={true} />\n          {listSeries.map((item) => (\n            <Series key={item} argumentField=\"timestamp\" valueField={item} />\n          ))}\n        </ChartOptions>\n      </RangeSelector>\n    </React.Fragment>\n  );\n}\n\nexport default BrushDevExtreme;\n\nvar zoomingData = [\n  { arg: 10, y1: -12, y2: 10, y3: 32 },\n  { arg: 20, y1: -32, y2: 30, y3: 12 },\n  { arg: 40, y1: -20, y2: 20, y3: 30 },\n  { arg: 50, y1: -39, y2: 50, y3: 19 },\n  { arg: 60, y1: -10, y2: 10, y3: 15 },\n  { arg: 75, y1: 10, y2: 10, y3: 15 },\n  { arg: 80, y1: 30, y2: 50, y3: 13 },\n  { arg: 90, y1: 40, y2: 50, y3: 14 },\n  { arg: 100, y1: 50, y2: 90, y3: 90 },\n  { arg: 105, y1: 40, y2: 175, y3: 120 },\n  { arg: 110, y1: -12, y2: 10, y3: 32 },\n  { arg: 120, y1: -32, y2: 30, y3: 12 },\n  { arg: 130, y1: -20, y2: 20, y3: 30 },\n  { arg: 140, y1: -12, y2: 10, y3: 32 },\n  { arg: 150, y1: -32, y2: 30, y3: 12 },\n  { arg: 160, y1: -20, y2: 20, y3: 30 },\n  { arg: 170, y1: -39, y2: 50, y3: 19 },\n  { arg: 180, y1: -10, y2: 10, y3: 15 },\n  { arg: 185, y1: 10, y2: 10, y3: 15 },\n  { arg: 190, y1: 30, y2: 100, y3: 13 },\n  { arg: 200, y1: 40, y2: 110, y3: 14 },\n  { arg: 210, y1: 50, y2: 90, y3: 90 },\n  { arg: 220, y1: 40, y2: 95, y3: 120 },\n  { arg: 230, y1: -12, y2: 10, y3: 32 },\n  { arg: 240, y1: -32, y2: 30, y3: 12 },\n  { arg: 255, y1: -20, y2: 20, y3: 30 },\n  { arg: 270, y1: -12, y2: 10, y3: 32 },\n  { arg: 280, y1: -32, y2: 30, y3: 12 },\n  { arg: 290, y1: -20, y2: 20, y3: 30 },\n  { arg: 295, y1: -39, y2: 50, y3: 19 },\n  { arg: 300, y1: -10, y2: 10, y3: 15 },\n  { arg: 310, y1: 10, y2: 10, y3: 15 },\n  { arg: 320, y1: 30, y2: 100, y3: 13 },\n  { arg: 330, y1: 40, y2: 110, y3: 14 },\n  { arg: 340, y1: 50, y2: 90, y3: 90 },\n  { arg: 350, y1: 40, y2: 95, y3: 120 },\n  { arg: 360, y1: -12, y2: 10, y3: 32 },\n  { arg: 367, y1: -32, y2: 30, y3: 12 },\n  { arg: 370, y1: -20, y2: 20, y3: 30 },\n  { arg: 380, y1: -12, y2: 10, y3: 32 },\n  { arg: 390, y1: -32, y2: 30, y3: 12 },\n  { arg: 400, y1: -20, y2: 20, y3: 30 },\n  { arg: 410, y1: -39, y2: 50, y3: 19 },\n  { arg: 420, y1: -10, y2: 10, y3: 15 },\n  { arg: 430, y1: 10, y2: 10, y3: 15 },\n  { arg: 440, y1: 30, y2: 100, y3: 13 },\n  { arg: 450, y1: 40, y2: 110, y3: 14 },\n  { arg: 460, y1: 50, y2: 90, y3: 90 },\n  { arg: 470, y1: 40, y2: 95, y3: 120 },\n  { arg: 480, y1: -12, y2: 10, y3: 32 },\n  { arg: 490, y1: -32, y2: 30, y3: 12 },\n  { arg: 500, y1: -20, y2: 20, y3: 30 },\n  { arg: 510, y1: -12, y2: 10, y3: 32 },\n  { arg: 520, y1: -32, y2: 30, y3: 12 },\n  { arg: 530, y1: -20, y2: 20, y3: 30 },\n  { arg: 540, y1: -39, y2: 50, y3: 19 },\n  { arg: 550, y1: -10, y2: 10, y3: 15 },\n  { arg: 555, y1: 10, y2: 10, y3: 15 },\n  { arg: 560, y1: 30, y2: 100, y3: 13 },\n  { arg: 570, y1: 40, y2: 110, y3: 14 },\n  { arg: 580, y1: 50, y2: 90, y3: 90 },\n  { arg: 590, y1: 40, y2: 95, y3: 12 },\n  { arg: 600, y1: -12, y2: 10, y3: 32 },\n  { arg: 610, y1: -32, y2: 30, y3: 12 },\n  { arg: 620, y1: -20, y2: 20, y3: 30 },\n  { arg: 630, y1: -12, y2: 10, y3: 32 },\n  { arg: 640, y1: -32, y2: 30, y3: 12 },\n  { arg: 650, y1: -20, y2: 20, y3: 30 },\n  { arg: 660, y1: -39, y2: 50, y3: 19 },\n  { arg: 670, y1: -10, y2: 10, y3: 15 },\n  { arg: 680, y1: 10, y2: 10, y3: 15 },\n  { arg: 690, y1: 30, y2: 100, y3: 13 },\n  { arg: 700, y1: 40, y2: 110, y3: 14 },\n  { arg: 710, y1: 50, y2: 90, y3: 90 },\n  { arg: 720, y1: 40, y2: 95, y3: 120 },\n  { arg: 730, y1: 20, y2: 190, y3: 130 },\n  { arg: 740, y1: -32, y2: 30, y3: 12 },\n  { arg: 750, y1: -20, y2: 20, y3: 30 },\n  { arg: 760, y1: -12, y2: 10, y3: 32 },\n  { arg: 770, y1: -32, y2: 30, y3: 12 },\n  { arg: 780, y1: -20, y2: 20, y3: 30 },\n  { arg: 790, y1: -39, y2: 50, y3: 19 },\n  { arg: 800, y1: -10, y2: 10, y3: 15 },\n  { arg: 810, y1: 10, y2: 10, y3: 15 },\n  { arg: 820, y1: 30, y2: 100, y3: 13 },\n  { arg: 830, y1: 40, y2: 110, y3: 14 },\n  { arg: 840, y1: 50, y2: 90, y3: 90 },\n  { arg: 850, y1: 40, y2: 95, y3: 120 },\n  { arg: 860, y1: -12, y2: 10, y3: 32 },\n  { arg: 870, y1: -32, y2: 30, y3: 12 },\n  { arg: 880, y1: -20, y2: 20, y3: 30 },\n];\n","import { BaseChartOptions } from \"devextreme/viz/chart_components/base_chart\";\n\nimport moment from \"moment\";\nimport { EventCommanderSensorRangeData, EventStateType } from \"../../../models/events\";\n\nfunction mapEventsToRangeDevExtreme(\n  listSensors: EventCommanderSensorRangeData[]\n): BaseChartOptions[\"dataSource\"] {\n  return listSensors.flatMap((sensor, indexSensor) =>\n    sensor.rangesValues.map((event) => ({\n      state: event.valid ? EventStateType.ON : EventStateType.INVALID,\n      from: event.from,\n      to: event.to,\n      \"controlunit-channel\": `${sensor.controlunit}-${sensor.channel}`,\n    }))\n  );\n}\nexport default mapEventsToRangeDevExtreme;\n","import React, { useMemo } from \"react\";\n\nimport {\n  Chart,\n  CommonSeriesSettings,\n  Legend,\n  SeriesTemplate,\n  Animation,\n  ArgumentAxis,\n  Tick,\n  Title,\n  Subtitle,\n} from \"devextreme-react/chart\";\nimport { ChartProps } from \"../../chart.model\";\nimport mapEventsToRangeDevExtreme from \"../mapEventsToRangeDevExtreme\";\n\nfunction RangeTime({ data }: ChartProps) {\n  const dataSource = useMemo(() => mapEventsToRangeDevExtreme(data), [data]);\n\n  return (\n    <Chart\n      id=\"chart\"\n      dataSource={dataSource}\n      barGroupPadding={0.2}\n      rotated={true}\n    >\n      <ArgumentAxis categories={[\"States\"]}>\n        <Tick visible={false} />\n      </ArgumentAxis>\n      {/* @ts-ignore */}\n      <Title text=\"Sensor Data TimeSerieRange\" subtitle=\"Data maping to events\" />\n      <CommonSeriesSettings\n        type=\"rangeBar\"\n        argumentField=\"controlunit-channel\"\n        rangeValue1Field=\"from\"\n        rangeValue2Field=\"to\"\n        barOverlapGroup=\"controlunit-channel\"\n      ></CommonSeriesSettings>\n      <Legend verticalAlignment=\"bottom\" horizontalAlignment=\"center\">\n        <Title text=\"States\" />\n      </Legend>\n      <SeriesTemplate nameField=\"state\" />\n      <Animation enabled={false} />\n    </Chart>\n  );\n}\n\nexport default RangeTime;\n","import React, { useMemo } from \"react\";\n\nimport {\n  Chart,\n  TimeframeSelectionPanel,\n  LAST_24_HOURS,\n  withSnackbar,\n  TYPE_CHART_TIMELINE,\n  // @ts-ignore\n} from \"stoerk-ui-components\";\nimport { ChartProps } from \"../chart.model\";\nimport { mapEventsToSeries } from \"./mapEventsToSeries\";\nconst dataTimeLine = {\n  Event01: {\n    name: \"Event01\",\n    unit: \"C\",\n    data: [\n      { start: 10, end: 100 },\n      { start: 105, end: 200 },\n    ],\n  },\n  Event02: {\n    name: \"Event02\",\n    unit: \"C\",\n    data: [\n      { start: 100, end: 500 },\n      { start: 700, end: 900 },\n    ],\n  },\n  Event03: {\n    name: \"Event03\",\n    unit: \"C\",\n    data: [\n      { start: 500, end: 800 },\n      { start: 900, end: 2000 },\n    ],\n  },\n  Event04: {\n    name: \"Event04\",\n    unit: \"C\",\n    data: [\n      { start: 50, end: 150 },\n      { start: 700, end: 900 },\n    ],\n  },\n};\nexport default function STGoogleSeries({ data }: ChartProps) {\n  const series = useMemo(() => mapEventsToSeries(data), [data]);\n  console.log({ series, dataTimeLine, data });\n\n  return <Chart data={series} type={TYPE_CHART_TIMELINE} />;\n}\n","import ApexBrush from \"./Apex/ApexBrush\";\nimport ApexBrushWithRange from \"./Apex/ApexBrush/ApexBrushWithRange\";\nimport ApexLine from \"./Apex/ApexLine\";\nimport ApexLineTwoAxies from \"./Apex/ApexLineTwoAxies\";\nimport ApexSeries from \"./Apex/ApexSeries\";\nimport { MultiAxisLine } from \"./ChartJS\";\nimport { C3LineBrush } from \"./D3/C3\";\nimport D3BarChart from \"./D3/D3/D3BarChart\";\nimport D3Line from \"./D3/D3/D3Line\";\nimport D3Line2 from \"./D3/D3/D3Line2\";\nimport D3Line3 from \"./D3/D3/D3Line3\";\nimport D3Line4 from \"./D3/D3/D3Line4\";\nimport { D3Zoom } from \"./D3/Zoom/D3Zoom\";\nimport { ReactD3Line } from \"./D3/Zoom/ReactD3Line\";\nimport BrushDevExtreme from \"./DevExtreme/BrushDevExtreme\";\nimport RangeTime from \"./DevExtreme/RangeTime\";\nimport STGoogleLine from \"./ST-Google/STGoogleLine\";\nimport STGoogleSeries from \"./ST-Google/STGoogleSeries\";\n\nexport const chartSeries = [\n  { name: \"ApexSeries\", path: \"series/ApexSeries\", ChartComponent: ApexSeries },\n  {\n    name: \"DevExtremeRangeTime\",\n    path: \"series/DevExtremeRangeTime\",\n    ChartComponent: RangeTime,\n  },\n  {\n    name: \"STGoogleSeries(Not work yet)\",\n    path: \"line/STGoogleSeries\",\n    ChartComponent: STGoogleSeries,\n  },\n];\n\nexport const chartLine = [\n  { name: \"ApexBrush\", path: \"line/ApexBrush\", ChartComponent: ApexBrush },\n  {\n    name: \"ApexBrushWithRange\",\n    path: \"line/ApexBrushWithRange\",\n    ChartComponent: ApexBrushWithRange,\n  },\n  { name: \"ApexLine\", path: \"line/ApexLine\", ChartComponent: ApexLine },\n  {\n    name: \"ApexLine2Axies\",\n    path: \"line/ApexLineTwoAxies\",\n    ChartComponent: ApexLineTwoAxies,\n  },\n  {\n    name: \"MultiAxisLine\",\n    path: \"line/MultiAxisLine\",\n    ChartComponent: MultiAxisLine,\n  },\n  {\n    name: \"BrushDevExtreme\",\n    path: \"line/BrushDevExtreme\",\n    ChartComponent: BrushDevExtreme,\n  },\n  {\n    name: \"C3Line\",\n    path: \"line/C3Line\",\n    ChartComponent: C3LineBrush,\n  },\n  // {\n  //   name: \"D3Zoom\",\n  //   path: \"line/D3Zoom\",\n  //   ChartComponent: D3Zoom,\n  // },\n  // {\n  //   name: \"ReactD3Line\",\n  //   path: \"line/ReactD3Line\",\n  //   ChartComponent: ReactD3Line,\n  // },\n  // {\n  //   name: \"D3BarChart\",\n  //   path: \"line/D3BarChart\",\n  //   ChartComponent: D3BarChart,\n  // },\n  // {\n  //   name: \"D3Line\",\n  //   path: \"line/D3Line\",\n  //   ChartComponent: D3Line,\n  // },\n  // {\n  //   name: \"D3Line2\",\n  //   path: \"line/D3Line2\",\n  //   ChartComponent: D3Line2,\n  // },\n  {\n    name: \"D3Line\",\n    path: \"line/D3Line\",\n    ChartComponent: D3Line3,\n  },\n  // {\n  //   name: \"D3Line4 \",\n  //   path: \"line/D3Line4\",\n  //   ChartComponent: D3Line4,\n  // },\n  {\n    name: \"STGoogleLine\",\n    path: \"line/STGoogleLine\",\n    ChartComponent: STGoogleLine,\n  },\n];\n","// data = TYPE_CHART_TIMELINE (object = { [eventId]: {name, id, data: [start, end]} })\n\nimport moment from \"moment\";\nimport { EventCommanderSensorRangeData } from \"../../../models/events\";\nimport { COLORS } from \"../chart.model\";\n\nexport function mapEventsToSeries(\n  listSensors: EventCommanderSensorRangeData[]\n) {\n  return listSensors.reduce((accSensor, sensor, index) => {\n    return {\n      [`${sensor.controlunit}-${sensor.channel}`]: {\n        name: `${sensor.controlunit}-${sensor.channel}-name`,\n        id: `${sensor.controlunit}-${sensor.channel}`,\n        unit: sensor.controlunit,\n        data: sensor.rangesValues\n          .filter((event) => event.valid)\n          .map((event) => ({\n            start: (event.from as number) / 1000,\n            end: (event.to as number) / 1000,\n          })),\n      },\n      ...accSensor,\n    };\n  }, {} as any);\n}\n","import { EventCommanderSensorRangeData } from \"../../../models/events\";\nimport { COLORS } from \"../chart.model\";\nimport * as Utils from \"./Util\";\n\nexport function mapEventsToDataSetsChartJs(\n  listSensors: EventCommanderSensorRangeData[]\n) {\n  return listSensors\n    .map((sensor, indexSensor) => ({\n      label: `${sensor.controlunit}-${sensor.channel}`,\n      data: sensor.values.map((event) => ({\n        x: new Date(event.timestamp as number),\n        y: event.value,\n      })),\n      borderColor: COLORS[indexSensor],\n      backgroundColor: Utils.transparentize(COLORS[indexSensor], 0.5),\n    //   yAxisID: sensor.unit,\n    }))\n    \n}\n","import { EventCommanderSensorRangeData } from \"../../../../models/events\";\nimport { Data } from \"c3\";\nexport function mapEventsToC3Columns(\n  listSensors: EventCommanderSensorRangeData[]\n): Data[\"columns\"] {\n  const dicTimeStamps: any = {};\n\n  const listData: Data[\"columns\"] = listSensors.map((sensor, indexSensor) => [\n    `${sensor.controlunit}-${sensor.channel}`,\n    ...sensor.values.map((event) => {\n      if (!dicTimeStamps[event.timestamp as number])\n        dicTimeStamps[event.timestamp as number] = event.timestamp;\n      return event.value;\n    }),\n  ]);\n  return [[\"x\", ...(Object.values(dicTimeStamps) as number[])], ...listData];\n}\n","import React, { useMemo } from \"react\";\n\nimport {\n  Chart,\n  TimeframeSelectionPanel,\n  LAST_24_HOURS,\n  withSnackbar,\n  TYPE_CHART_LINECHART,\n  // @ts-ignore\n} from \"stoerk-ui-components\";\nimport { ChartProps } from \"../chart.model\";\nimport { mapEventsToLine } from \"./mapEventsToLine\";\n\nexport default function STGoogleLine({ data }: ChartProps) {\n  const series = useMemo(() => mapEventsToLine(data), [data]);\n  return <Chart data={series} />;\n}\n","// data = TYPE_CHART_LINECHART (array = [{name, unit, data: [timestamp, val]}])\nimport moment from \"moment\";\nimport { EventCommanderSensorRangeData } from \"../../../models/events\";\nimport { COLORS } from \"../chart.model\";\n\nexport function mapEventsToLine(listSensors: EventCommanderSensorRangeData[]) {\n  return listSensors.map((sensor, indexSensor) => ({\n    name: `${sensor.controlunit}-${sensor.channel}-name`,\n    unit: `${sensor.controlunit}-${sensor.channel}`,\n    color: COLORS[indexSensor],\n    data: sensor.values.map((event) => ({\n      timestamp: event.timestamp,\n      val: event.value,\n    })),\n  }));\n}\n","import \"./App.scss\";\nimport Commander from \"./modules/Commander/Commander\";\nimport logo from \"./assets/imgs/logo-stor.jpeg\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  HashRouter,\n} from \"react-router-dom\";\n\n// Configure FontAwesome\nimport fontawesome from \"@fortawesome/fontawesome\";\nimport { faCheckSquare, faCoffee } from \"@fortawesome/fontawesome-free-solid\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport {\n  chartLine,\n  chartSeries,\n} from \"./modules/Commander/components/Charts/chartSeries\";\n\nfontawesome.library.add(faCheckSquare, faCoffee);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <header className=\"App-header\">\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#/\">\n              <img\n                className=\"d-none d-md-inline mx-2 logo\"\n                src={logo}\n                alt=\"Logo\"\n              />\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#/\">Home</Nav.Link>\n                <NavDropdown title=\"TimeSeriesChart\" id=\"basic-nav-dropdown\">\n                  {chartSeries.map((chart) => (\n                    <NavDropdown.Item href={`#/${chart.path}`}>\n                      {chart.name}\n                    </NavDropdown.Item>\n                  ))}\n                </NavDropdown>\n                <NavDropdown title=\"TimeLineChart\" id=\"basic-nav-dropdown\">\n                  {chartLine.map((chart) => (\n                    <NavDropdown.Item href={`#/${chart.path}`}>\n                      {chart.name}\n                    </NavDropdown.Item>\n                  ))}\n                </NavDropdown>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </header>\n        <main>\n          <Switch>\n            {chartSeries.map((chart) => (\n              <Route path={`/${chart.path}`}>\n                <Commander ChartComponent={chart.ChartComponent} />\n              </Route>\n            ))}\n            {chartLine.map((chart) => (\n              <Route path={`/${chart.path}`}>\n                <Commander ChartComponent={chart.ChartComponent} />\n              </Route>\n            ))}\n            <Route path=\"/\">\n              <h3 className=\"m-3\">\n                There is many demos to see different implementations of the\n                charts, remember that it is very important to test them on\n                mobile. Please only take into account the interaction of the\n                chart. Each chart will render in relative time:\n                <li>\n                  \"hour\": will render 40 timestamps x 9 channels == {40 * 9} on\n                  26KB\n                </li>\n                <li>\n                  \"day\": will render 960 timestamps x 9 channels == {960 * 9} on\n                  586KB\n                </li>\n                <li>\n                  \"week\": will render 6638 timestamps x 9 channels == {6638 * 9}{\" \"}\n                  on 3.2MB\n                </li>\n                <li>\n                  \"month\": will render 28719 timestamps x 9 channels ==\n                  {28719 * 9}on 14M\n                </li>\n              </h3>\n              <div className=\"m-3\">\n                <h2>TimeRangeSeries:</h2>\n                {chartSeries.map((chart) => (\n                  <NavDropdown.Item href={`#/${chart.path}`}>\n                    {chart.name}\n                  </NavDropdown.Item>\n                ))}\n                <h2>TimeLinesSeries:</h2>\n\n                {chartLine.map((chart) => (\n                  <NavDropdown.Item href={`#/${chart.path}`}>\n                    {chart.name}\n                  </NavDropdown.Item>\n                ))}\n                <ul>\n                  <li>\n                    <a href=\"https://observablehq.com/d/52176890cbab5698\">\n                      D3 Example 23000 rows\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"https://observablehq.com/@d3/focus-context?collection=@d3/d3-brush\">\n                      D3 Example brush\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </Route>\n          </Switch>\n        </main>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}