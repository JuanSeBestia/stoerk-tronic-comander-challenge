{"version":3,"sources":["shared/apexcharts/config.ts","shared/components/Loading.tsx","modules/Commander/models/events.ts","modules/Commander/business-logic/rangeEventsToApexchartSeries.ts","modules/Commander/state/selectorGetSeries.ts","shared/utils/mock/sleepPromise.ts","modules/Commander/business-logic/eventsToRangeEvents.ts","modules/Commander/business-logic/mock/eventsMock.ts","modules/Commander/business-logic/eventCommanderAPI.ts","modules/Commander/state/useEventCommanderRange.ts","modules/Commander/components/MultipleChoseForm.tsx","modules/Commander/components/RangeDateTimePicker.tsx","modules/Commander/components/Filters.tsx","modules/Commander/Commander.tsx","assets/imgs/logo-stor.jpeg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DATE_FORMAT","STATE_COLORS","On","INVALID","Off","options","chart","height","type","plotOptions","bar","horizontal","distributed","barHeight","dataLabels","hideOverflowingLabels","enabled","xaxis","yaxis","show","tooltip","x","format","y","custom","data","series","seriesIndex","dataPointIndex","w","color","seriesName","ylabel","start","end","diff","buildCustomTooltipHTML","globals","colors","config","state","moment","seriesRangeStart","seriesRangeEnd","from","to","a","diffDateFormat","grid","row","opacity","Loading","EventComponentType","EventStateType","className","icon","spin","size","OFF_COLOR","DEVICE_COLOR","COMPRESSOR_COLOR","FAN_COLOR","LIGHT_COLOR","eventStateTypeColor","DEVICE","OFF","ON","COMPRESSOR","FAN","LIGHT","rangeEventsToApexchartSeries","dicEventRange","Object","values","flatMap","map","event","valueOf","fillColor","selectorGetSeries","_","memoize","eventCommanderRangeList","title","sleepPromise","millisecond","Promise","resolve","setTimeout","eventsToRangeEvents","listEvents","precision","reduce","listEventRange","itemEvent","index","timestamp","previousEvent","lastEventRange","length","add","isSameOrAfter","push","getEventState","list","probabilityToPreserveState","lastItem","Math","random","possiblesStates","filter","item","sample","pushValue","events","eventsMock","currentMoment","forEach","isSameOrBefore","addEvents","filterState","components","includes","eventCommanderAPI","getEvents","then","dates","keys","dic","key","states","console","log","useEventCommanderRange","useState","loading","setLoading","undefined","error","setEventCommanderRangeList","useEffect","finally","hasItem","find","itemList","isEqual","MultipleChoseForm","controlId","field","setField","label","Card","Body","Form","Group","Label","Check","id","name","text","onChange","elementInList","toggleItem","value","checked","style","RangeDateTimePicker","FilterTypes","labelFrom","labelTo","TextField","toISOString","split","e","target","variant","InputLabelProps","shrink","componentsOptions","statesOptions","Filters","setFilterState","refForm","useRef","ref","Accordion","Header","Toggle","as","Button","eventKey","COMPONENTS","STATES","DATES","Collapse","initialFilterState","Commander","fontawesome","library","faCheckSquare","faCoffee","App","Navbar","bg","expand","Brand","href","src","logo","alt","aria-controls","Nav","Link","NavDropdown","Item","Divider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAEMA,EAAc,kBACdC,EAAuC,CAC3CC,GAAI,QACJC,QAAS,MACTC,IAAK,QA4CP,IAsFeC,EAtFC,CACdC,MAAO,CACLC,OAAQ,IACRC,KAAM,YAERC,YAAa,CACXC,IAAK,CACHC,YAAY,EACZC,aAAa,EACbC,UAAW,MACXC,WAAY,CACVC,uBAAuB,KAI7BD,WAAY,CACVE,SAAS,GAcXC,MAAO,CACLT,KAAM,YAERU,MAAO,CACLC,MAAM,GAERC,QAAS,CACPC,EAAG,CACDF,MAAM,EACNG,OAAQ,gBAEVC,EAAG,CACDJ,MAAM,GAERK,OAAQ,SAAUC,GACmCA,EAA3CC,OADoB,IACZC,EAAmCF,EAAnCE,YAAaC,EAAsBH,EAAtBG,eAAgBC,EAAMJ,EAANI,EAgB7C,OA7FN,YAOS,IANPC,EAMM,EANNA,MACAC,EAKM,EALNA,WACAC,EAIM,EAJNA,OACAC,EAGM,EAHNA,MACAC,EAEM,EAFNA,IACAC,EACM,EADNA,KAGA,MACE,0FAEAL,EACA,MACCC,GAA0B,IAC3B,sBAPkB9B,EAAa+B,GAS/B,SACAA,EACA,YACAG,EAVA,oEAcAF,EACA,0EACAC,EAhBA,sBAmFSE,CAAuB,CAC5BN,MAfYD,EAAEQ,QAAQC,OAAOX,GAgB7BI,WAfiBF,EAAEU,OAAOb,OAAOC,GAAaF,KAAKG,GAAgBP,EAgBnEW,OAfYH,EAAEU,OAAOb,OAAOC,GAAaF,KAAKG,GAAgBY,MAgB9DP,MAdYQ,IACZZ,EAAEQ,QAAQK,iBAAiBf,GAAaC,IACxCN,OAAOtB,GAaPkC,IAZUO,IACVZ,EAAEQ,QAAQM,eAAehB,GAAaC,IACtCN,OAAOtB,GAWPmC,KA5GR,SAAwBS,EAA0BC,GAChD,IAAIC,EAAIL,IAAOG,GAEXT,EADIM,IAAOI,GACFV,KAAKW,EAAG,SAGrB,MAAO,OAASX,GAAQA,EAAO,EAAI,SAAW,SA4F7BY,CACXlB,EAAEQ,QAAQK,iBAAiBf,GAAaC,GACxCC,EAAEQ,QAAQM,eAAehB,GAAaC,QAmB5CoB,KAAM,CACJC,IAAK,CACHX,OAAQ,CAAC,UAAW,QACpBY,QAAS,M,eCpHAC,ICbHC,EAOAC,E,UDMGF,EAbf,WACE,OACE,sBAAKG,UAAU,cAAf,UACE,cAAC,IAAD,CACEC,KAAK,UACLC,MAAI,EACJC,KAAK,MACLH,UAAU,iBAEZ,oBAAIA,UAAU,oBAAd,6B,kCCTMF,K,gBAAAA,E,wBAAAA,E,UAAAA,E,eAAAA,M,cAOAC,K,QAAAA,E,UAAAA,E,mBAAAA,M,KCDZ,IAAMK,EAAY,YACZC,EAAY,UACZC,EAAgB,UAChBC,EAAS,UACTC,EAAW,UAEJC,GAGZ,mBACEX,EAAmBY,QADrB,mBAEIX,EAAeY,IAAMP,GAFzB,cAGIL,EAAea,GAAKP,GAHxB,cAKIN,EAAelD,QAAUwD,aAL7B,kBAOEP,EAAmBe,YAPrB,mBAQId,EAAeY,IAAMP,GARzB,cASIL,EAAea,GAAKN,GATxB,cAWIP,EAAelD,QAAUyD,aAX7B,kBAaER,EAAmBgB,KAbrB,mBAcIf,EAAeY,IAAMP,GAdzB,cAeIL,EAAea,GAAKL,GAfxB,cAiBIR,EAAelD,QAAU0D,aAjB7B,kBAmBET,EAAmBiB,OAnBrB,mBAoBIhB,EAAeY,IAAMP,GApBzB,cAqBIL,EAAea,GAAKJ,GArBxB,cAuBIT,EAAelD,QAAU2D,aAvB7B,OAuCcQ,MAZf,SACEC,GAEA,OAAOC,OAAOC,OAAOF,GAClBG,SAAQ,SAACrD,GAAD,OAAOA,KACfsD,KAAI,SAACC,GAAD,MAAY,CACfvD,EAAGuD,EAAMpE,KACTe,EAAG,CAACkB,IAAOmC,EAAMhC,MAAMiC,UAAWpC,IAAOmC,EAAM/B,IAAIgC,WACnDC,UAAWf,EAAoBa,EAAMpE,MAAMoE,EAAMpC,OACjDA,MAAOoC,EAAMpC,WCxCJuC,EATWC,IAAEC,SAC1B,SAACC,GAAD,IAA0BC,EAA1B,uDAAkC,cAAlC,MAAoD,CAClD,CACEA,QACA1D,KAAM6C,EAA6BY,QCF1BE,MANf,WAAmD,IAA7BC,EAA4B,uDAAN,IAC1C,OAAO,IAAIC,SAAQ,SAACC,GAClBC,WAAWD,EAASF,OCmDTI,MA7Cf,SACEC,GAEwB,IADxBC,EACuB,uDADH,GAEpB,OAAOD,EAAWE,QAAO,SAACC,EAAgBC,EAAWC,GAEnD,GAAc,IAAVA,EACF,MAAO,CACL,CACEnD,KAAMkD,EAAUE,UAChBnD,GAAI,GACJrC,KAAMsF,EAAUtF,KAChBgC,MAAOsD,EAAUtD,QAGvB,IAAMyD,EAAgBP,EAAWK,EAAQ,GACrCG,EAAiBL,EAAeA,EAAeM,OAAS,GAyB5D,OArBED,EAAe1D,QAAUsD,EAAUtD,OAClCC,IAAOwD,EAAcD,WAEnBI,IAAIT,EAAW,SACfU,cAAcP,EAAUE,aAE3BE,EAAerD,GAAKiD,EAAUE,UAC9BE,EAAiB,CACftD,KAAMkD,EAAUE,UAChBnD,GAAI,GACJrC,KAAMsF,EAAUtF,KAChBgC,MAAOsD,EAAUtD,OAEnBqD,EAAeS,KAAKJ,IAIlBH,IAAUL,EAAWS,OAAS,IAChCD,EAAerD,GAAKiD,EAAUE,WAGzBH,IACN,KCpCL,SAASU,EACPC,GAEiB,IADjBC,EACgB,uDADqB,GAE/BC,EAAWF,EAAKA,EAAKL,OAAS,GACpC,IAAKO,EAAU,OAAOrD,EAAea,GACrC,GAAIyC,KAAKC,SAAWH,EAA4B,CAC9C,IAAMI,EAAoCrC,OAAOC,OAC/CpB,GACAyD,QAAO,SAACC,GAAD,OAAUA,IAASL,EAASlE,SACrC,OAAOwC,IAAEgC,OAAOH,GAEhB,OAAOH,EAASlE,MAUpB,SAASyE,EACPzG,EACAwF,EACAkB,GAEAA,EAAO1G,GAAM8F,KAAK,CAChB9D,MAAO+D,EAAcW,EAAO1G,IAC5BwF,YACAxF,SA6BW2G,MAzBf,WAWE,IAR+C,IAAD,EAF9CvE,EAE8C,uDAF/BH,MACfI,EAC8C,uDADjCJ,IAAOG,GAAMwD,IAAI,GAAI,QAE5Bc,GAAoD,mBACvD9D,EAAmBY,OAAS,IAD2B,cAEvDZ,EAAmBe,WAAa,IAFuB,cAGvDf,EAAmBgB,IAAM,IAH8B,cAIvDhB,EAAmBiB,MAAQ,IAJ4B,GADZ,WASxC+C,GAMJ5C,OAAOC,OAAOrB,GAAoBiE,SAAQ,SAAC7G,GAAD,OACxCyG,EAAUzG,EAA4B4G,EAAeF,OAPnDE,EAAgB3E,IAAOG,GAC3BwE,EAAcE,eAAezE,GAG7BuE,EAAgB3E,IAAO2E,GAAehB,IAAI,GAAI,SAC7C,EALGgB,GAUN,OAAOF,GC1DT,SAASK,EACPL,EACA1G,EACAgH,GAEA,OAAOA,EAAYC,WAAWC,SAASlH,GACnCiF,EAAoByB,EAAO1G,IAC3B,GAKN,IA2CemH,EA3CW,CACxBC,UAAW,SACTJ,GADS,OAGTpC,IACGyC,MAAK,WACJ,OAAOV,EAAWK,EAAYM,MAAMlF,KAAM4E,EAAYM,MAAMjF,OAE7DgF,MAAK,SAACX,GAAD,OACJ1C,OAAOuD,KAAKb,GAAQtB,QAAO,SAACoC,EAAKC,GAI/B,OAHAD,EAAIC,GAA6Bf,EAC/Be,GACAnB,QAAO,SAACC,GAAD,OAAUS,EAAYU,OAAOR,SAASX,EAAKvE,UAC7CwF,IACN,OAEJH,MAAK,SAACX,GAAD,gCACH9D,EAAmBY,OAASuD,EAC3BL,EACA9D,EAAmBY,OACnBwD,IAJE,cAMHpE,EAAmBe,WAAaoD,EAC/BL,EACA9D,EAAmBe,WACnBqD,IATE,cAWHpE,EAAmBgB,IAAMmD,EACxBL,EACA9D,EAAmBgB,IACnBoD,IAdE,cAgBHpE,EAAmBiB,MAAQkD,EAC1BL,EACA9D,EAAmBiB,MACnBmD,IAnBE,KAsBLK,MAAK,SAACpG,GAEL,OADA0G,QAAQC,IAAI,qBAAsB,CAAE3G,SAC7BA,OCpCA4G,MAvBf,SAAgCb,GAA2B,IAAD,IAC1Bc,oBAAS,GADiB,mBACjDC,EADiD,KACxCC,EADwC,OAE9BF,wBAA6BG,GAFC,mBAEjDC,EAFiD,aAGMJ,oBAAQ,mBAGnElF,EAAmBY,OAAS,IAHuC,cAInEZ,EAAmBe,WAAa,IAJmC,cAKnEf,EAAmBgB,IAAM,IAL0C,cAMnEhB,EAAmBiB,MAAQ,IANwC,KAHd,mBAGjDa,EAHiD,KAGxByD,EAHwB,KAqBxD,OATAC,qBAAU,WACRJ,GAAW,GACXb,EACGC,UAAUJ,GACVK,KAAKc,GAELE,SAAQ,kBAAML,GAAW,QAC3B,CAAChB,IAEG,CAACtC,EAAyBqD,EAASG,I,0CCdrC,SAASI,EAAWtC,EAAWO,GAEpC,QADsBP,EAAKuC,MAAK,SAACC,GAAD,OAAchE,IAAEiE,QAAQlC,EAAMiC,MA4CjDE,MAhCf,YAM4B,IAL1BC,EAKyB,EALzBA,UACAC,EAIyB,EAJzBA,MACAC,EAGyB,EAHzBA,SACAhJ,EAEyB,EAFzBA,QACAiJ,EACyB,EADzBA,MAEA,OACE,cAACC,EAAA,EAAKC,KAAN,UACE,eAACC,EAAA,EAAKC,MAAN,CAAYP,UAAWA,EAAvB,UACE,cAACM,EAAA,EAAKE,MAAN,UAAaL,IACZjJ,EAAQsE,KAAI,SAACoC,GAAD,OACX,cAAC0C,EAAA,EAAKG,MAAN,CACEC,GAAI9C,EAAK8C,GACTrJ,KAAK,WACLsJ,KAAM/C,EAAK8C,GACXP,MAAOvC,EAAKgD,KACZC,SAAU,kBAAMX,EAtCrB,SAAuB7C,EAAWO,GACvC,IAAMkD,EAAgBzD,EAAKuC,MAAK,SAACC,GAAD,OAAchE,IAAEiE,QAAQlC,EAAMiC,MAC9D,OAAMiB,EACGzD,EAAKM,QAAO,SAACkC,GAAD,OAAcA,IAAaiB,KAE1C,GAAN,mBAAWzD,GAAX,CAAiBO,IAiCkBmD,CAAWd,EAAOrC,EAAKoD,SAChDC,QAAStB,EAAQM,EAAOrC,EAAKoD,OAC7BE,MACEtD,EAAKjF,MACD,CACEA,MAAOiF,EAAKjF,YAEd2G,a,SCCH6B,ICpCHC,EDoCGD,GAtCf,YAM8B,IAL5BnB,EAK2B,EAL3BA,UACAC,EAI2B,EAJ3BA,MACAC,EAG2B,EAH3BA,SACAmB,EAE2B,EAF3BA,UACAC,EAC2B,EAD3BA,QAIA,OACE,qCACE,cAACC,EAAA,EAAD,CACEb,GAAE,UAAKV,EAAL,SACFG,MAAOkB,EACPhK,KAAK,iBACL2J,MAAOf,EAAMxG,KAAK+H,cAAcC,MAAM,KAAK,GAC3CZ,SAAU,SAACa,GAAD,OATCjI,EASciI,EAAEC,OAAOX,MATNd,EAAS,2BAAKD,GAAN,IAAaxG,KAAMH,IAAOG,MAApD,IAACA,GAUXmI,QAAQ,WACRzH,UAAU,OACV0H,gBAAiB,CACfC,QAAQ,KAGZ,cAACP,EAAA,EAAD,CACEb,GAAE,UAAKV,EAAL,SACFG,MAAOmB,EACPjK,KAAK,iBACL2J,MAAOf,EAAMvG,GAAG8H,cAAcC,MAAM,KAAK,GACzCZ,SAAU,SAACa,GAAD,OApBDhI,EAoBcgI,EAAEC,OAAOX,MApBRd,EAAS,2BAAKD,GAAN,IAAavG,GAAIJ,IAAOI,MAAhD,IAACA,GAqBTkI,QAAQ,WACRzH,UAAU,OACV0H,gBAAiB,CACfC,QAAQ,U,SC9BNV,K,wBAAAA,E,gBAAAA,E,eAAAA,M,KAuFZ,IAAMW,GAAuD1G,OAAOC,OAClErB,GACAuB,KAAI,SAACwF,GAAD,MAAY,CAChBJ,KAAMI,EACNA,QACAN,GAAIM,EACJrI,MAAOiC,EAAoBoG,GAA6B9G,EAAea,QAGnEiH,GAAmD3G,OAAOC,OAC9DpB,GACAsB,KAAI,SAACwF,GAAD,MAAY,CAChBJ,KAAMI,EACNA,QACAN,GAAIM,MAESiB,GAjGf,YAAgE,IAA7C5D,EAA4C,EAA5CA,YAAa6D,EAA+B,EAA/BA,eACxBC,EAAUC,iBAA+B,MACvC9D,EAA8BD,EAA9BC,WAAYS,EAAkBV,EAAlBU,OAAQJ,EAAUN,EAAVM,MAO5B,OACE,cAAC2B,EAAA,EAAD,CAAM+B,IAAKF,EAAX,SACE,cAACG,EAAA,EAAD,UACE,eAAClC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKmC,OAAN,CAAapI,UAAU,6DAAvB,UACE,oBAAIA,UAAU,eAAd,2BACA,gCACE,cAACmI,EAAA,EAAUE,OAAX,CACErI,UAAU,OACVsI,GAAIC,IACJC,SAAUvB,EAAYwB,WACtBtI,KAAK,KAJP,wBAQA,cAACgI,EAAA,EAAUE,OAAX,CACErI,UAAU,OACVsI,GAAIC,IACJC,SAAUvB,EAAYyB,OACtBvI,KAAK,KAJP,oBAQA,cAACgI,EAAA,EAAUE,OAAX,CACErI,UAAU,OACVsI,GAAIC,IACJC,SAAUvB,EAAY0B,MACtBxI,KAAK,KAJP,yBAUJ,cAACgI,EAAA,EAAUS,SAAX,CAAoBJ,SAAUvB,EAAYwB,WAA1C,SACE,cAACxC,EAAA,EAAKC,KAAN,UACE,cAAC,EAAD,CACEL,UAAU,aACV9I,QAAS6K,GACT5B,MAAM,oBACND,SA7CQ,SAAC5B,GAAD,OACpB4D,EAAe,2BAAK7D,GAAN,IAAmBC,iBA6CrB2B,MAAO3B,QAIb,cAACgE,EAAA,EAAUS,SAAX,CAAoBJ,SAAUvB,EAAYyB,OAA1C,SACE,cAACzC,EAAA,EAAKC,KAAN,UACE,cAAC,EAAD,CACEL,UAAU,SACV9I,QAAS8K,GACT7B,MAAM,gBACND,SAtDI,SAACnB,GAAD,OAChBmD,EAAe,2BAAK7D,GAAN,IAAmBU,aAsDrBkB,MAAOlB,QAIb,cAACuD,EAAA,EAAUS,SAAX,CAAoBJ,SAAUvB,EAAY0B,MAA1C,SACE,cAAC1C,EAAA,EAAKC,KAAN,UACE,cAAC,GAAD,CACEL,UAAU,QACVC,MAAOtB,EACPuB,SA9DG,SAACvB,GAAD,OACfuD,EAAe,2BAAK7D,GAAN,IAAmBM,YA8DrB0C,UAAU,aACVC,QAAQ,2BC1EX0B,GAAkC,CAC7C1E,WAAYjD,OAAOC,OAAOrB,GAC1B8E,OAAQ1D,OAAOC,OAAOpB,GACtByE,MAAO,CAAElF,KAAMH,MAAS2D,KAAK,GAAI,QAASvD,GAAIJ,QAmCjC2J,OAhCf,WAAsB,IAAD,EACmB9D,mBACpC6D,IAFiB,mBACZ3E,EADY,KACC6D,EADD,OAK+BhD,EAAuBb,GALtD,mBAKZtC,EALY,KAKaqD,EALb,KAMb7G,GANa,KAMJqD,EAAkBG,IAEjC,OACE,sBAAK5B,UAAU,YAAf,UACE,qBAAKA,UAAU,gCAAf,wBAA2D5B,EAAO,GAAGyD,SACrE,eAACoE,EAAA,EAAD,CAAMjG,UAAU,MAAhB,UACE,8BACE,cAAC,GAAD,CAASkE,YAAaA,EAAa6D,eAAgBA,MAErD,qBAAKxB,GAAG,QAAR,SACGtB,EACC,cAAC,EAAD,IAEA,cAAC,IAAD,CACElI,QAASA,EACTqB,OAAQA,EACRlB,KAAK,WACLD,OAAQ,eC9CP,OAA0B,uC,gDCSzC8L,KAAYC,QAAQlG,IAAImG,KAAeC,MAwCxBC,OAtCf,WACE,OACE,sBAAKnJ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,eAACoJ,GAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACE,eAACF,GAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,UACE,qBAAKxJ,UAAU,0BAA0ByJ,IAAKC,GAAMC,IAAI,SAAU,IAClE,sBAAM3J,UAAU,eAAhB,8BAEF,cAACoJ,GAAA,EAAOf,OAAR,CAAeuB,gBAAc,qBAC7B,cAACR,GAAA,EAAOR,SAAR,CAAiBrC,GAAG,mBAApB,SACE,eAACsD,GAAA,EAAD,CAAK7J,UAAU,UAAf,UACE,cAAC6J,GAAA,EAAIC,KAAL,CAAUN,KAAK,QAAf,kBACA,cAACK,GAAA,EAAIC,KAAL,CAAUN,KAAK,QAAf,oBACA,eAACO,GAAA,EAAD,CAAalI,MAAM,WAAW0E,GAAG,qBAAjC,UACE,cAACwD,GAAA,EAAYC,KAAb,CAAkBR,KAAK,cAAvB,oBACA,cAACO,GAAA,EAAYC,KAAb,CAAkBR,KAAK,cAAvB,4BAGA,cAACO,GAAA,EAAYC,KAAb,CAAkBR,KAAK,cAAvB,uBAGA,cAACO,GAAA,EAAYE,QAAb,IACA,cAACF,GAAA,EAAYC,KAAb,CAAkBR,KAAK,cAAvB,yCAQV,+BACE,cAAC,GAAD,UC7BOU,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7F,MAAK,YAAkD,IAA/C8F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.0527bfbb.chunk.js","sourcesContent":["import moment from \"moment\";\n\nconst DATE_FORMAT = \"MMM DD HH:mm:ss\";\nconst STATE_COLORS: Record<string, string> = {\n  On: \"green\",\n  INVALID: \"red\",\n  Off: \"gray\",\n};\n\nfunction diffDateFormat(from: moment.MomentInput, to: moment.MomentInput) {\n  var a = moment(from);\n  var b = moment(to);\n  var diff = b.diff(a, \"hours\");\n  // TODO: support I18n\n  // TODO: support minutes, hours, days\n  return \"for \" + diff + (diff > 1 ? \" hours\" : \" hour\");\n}\n// extracted from https://github.com/apexcharts/apexcharts.js/blob/a2ce1b8640626a1434248cd536d81f51de389762/src/charts/RangeBar.js#L403\nfunction buildCustomTooltipHTML({\n  color,\n  seriesName,\n  ylabel,\n  start,\n  end,\n  diff,\n}: any) {\n  const ylabelColor = STATE_COLORS[ylabel];\n  return (\n    '<div class=\"apexcharts-tooltip-rangebar\">' +\n    '<div> <span class=\"series-name\" style=\"color: ' +\n    color +\n    '\">' +\n    (seriesName ? seriesName : \"\") +\n    '<span style=\"color:' +\n    ylabelColor +\n    ';\"> : ' +\n    ylabel +\n    \" <span> (\" +\n    diff +\n    \")</span></span></span></div>\" +\n    \"<div>\" +\n    '<span class=\"value start-value\">' +\n    start +\n    '</span> <span class=\"separator\">-</span> <span class=\"value end-value\">' +\n    end +\n    \"</span></div>\" +\n    \"</div>\"\n  );\n}\n\nconst options = {\n  chart: {\n    height: 350,\n    type: \"rangeBar\",\n  },\n  plotOptions: {\n    bar: {\n      horizontal: true,\n      distributed: true,\n      barHeight: \"90%\",\n      dataLabels: {\n        hideOverflowingLabels: false,\n      },\n    },\n  },\n  dataLabels: {\n    enabled: false,\n    // has a bug\n    // formatter: function (val: [start: number, end: number], opts: any) {\n    //   var a = moment(val[0]);\n    //   var b = moment(val[1]);\n    //   var diff = b.diff(a, \"hours\");\n    //   // TODO: support I18n\n    //   return diff + (diff > 1 ? \" hours\" : \" hours\");\n    // },\n    // style: {\n    //   colors: [\"#f3f4f5\", \"#fff\"],\n    //   height: 800,\n    // },\n  },\n  xaxis: {\n    type: \"datetime\",\n  },\n  yaxis: {\n    show: true,\n  },\n  tooltip: {\n    x: {\n      show: false,\n      format: \"dd MMM HH:mm\",\n    },\n    y: {\n      show: false,\n    },\n    custom: function (data: any) {\n      const { series, seriesIndex, dataPointIndex, w } = data;\n      // extracted from https://github.com/apexcharts/apexcharts.js/blob/a2ce1b8640626a1434248cd536d81f51de389762/src/charts/RangeBar.js#L12\n      const color = w.globals.colors[seriesIndex];\n      const seriesName = w.config.series[seriesIndex].data[dataPointIndex].x;\n      const state = w.config.series[seriesIndex].data[dataPointIndex].state;\n      const ylabel = state;\n      const start = moment(\n        w.globals.seriesRangeStart[seriesIndex][dataPointIndex]\n      ).format(DATE_FORMAT);\n      const end = moment(\n        w.globals.seriesRangeEnd[seriesIndex][dataPointIndex]\n      ).format(DATE_FORMAT);\n      const diff = diffDateFormat(\n        w.globals.seriesRangeStart[seriesIndex][dataPointIndex],\n        w.globals.seriesRangeEnd[seriesIndex][dataPointIndex]\n      );\n      return buildCustomTooltipHTML({\n        color,\n        seriesName,\n        ylabel,\n        start,\n        end,\n        diff,\n      });\n      return (\n        '<div class=\"arrow_box\">' +\n        \"<span>\" +\n        series[seriesIndex][dataPointIndex] +\n        \"</span>\" +\n        \"</div>\"\n      );\n    },\n  },\n  grid: {\n    row: {\n      colors: [\"#f3f4f5\", \"#fff\"],\n      opacity: 0.5,\n    },\n  },\n};\n\nexport default options;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Loading() {\n  return (\n    <div className=\"text-center\">\n      <FontAwesomeIcon\n        icon=\"spinner\"\n        spin\n        size=\"10x\"\n        className=\"text-primary\"\n      />\n      <h3 className=\"text-primary my-2\">LOADING ...</h3>\n    </div>\n  );\n}\nexport default Loading;\n","import { Moment } from \"moment\";\n\nexport enum EventComponentType {\n  DEVICE = \"DEVICE\",\n  COMPRESSOR = \"COMPRESSOR\",\n  FAN = \"FAN\",\n  LIGHT = \"LIGHT\",\n}\n\nexport enum EventStateType {\n  // pascal case for values according a challenge-2\n  ON = \"On\",\n  OFF = \"Off\",\n  INVALID = \"INVALID\",\n}\n\nexport interface EventCommander {\n  timestamp: string | Moment\n  type: EventComponentType,\n  state: EventStateType\n}\n\nexport interface EventCommanderRange {\n  /** Date when start the state */\n  from: string | Moment,\n  /** Date when finish the state */\n  to: string | Moment,\n  type: EventComponentType,\n  state: EventStateType\n}\n ","import moment from \"moment\";\nimport {\n  EventCommanderRange,\n  EventComponentType,\n  EventStateType,\n} from \"../models/events\";\nimport { SeriesApexChart } from \"../models/seriesApexcharts\";\n\nconst OFF_COLOR = \"#75757533\";\nconst DEVICE_COLOR = `#5189C8`;\nconst COMPRESSOR_COLOR = `#8973D6`;\nconst FAN_COLOR = `#F2BB38`;\nconst LIGHT_COLOR = `#72E8A7`;\n\nexport const eventStateTypeColor: Record<\n  EventComponentType,\n  Record<EventStateType, string>\n> = {\n  [EventComponentType.DEVICE]: {\n    [EventStateType.OFF]: OFF_COLOR,\n    [EventStateType.ON]: DEVICE_COLOR,\n    // opacity 40%\n    [EventStateType.INVALID]: DEVICE_COLOR + \"66\",\n  },\n  [EventComponentType.COMPRESSOR]: {\n    [EventStateType.OFF]: OFF_COLOR,\n    [EventStateType.ON]: COMPRESSOR_COLOR,\n    // opacity 40%\n    [EventStateType.INVALID]: COMPRESSOR_COLOR + \"66\",\n  },\n  [EventComponentType.FAN]: {\n    [EventStateType.OFF]: OFF_COLOR,\n    [EventStateType.ON]: FAN_COLOR,\n    // opacity 40%\n    [EventStateType.INVALID]: FAN_COLOR + \"66\",\n  },\n  [EventComponentType.LIGHT]: {\n    [EventStateType.OFF]: OFF_COLOR,\n    [EventStateType.ON]: LIGHT_COLOR,\n    // opacity 40%\n    [EventStateType.INVALID]: LIGHT_COLOR + \"66\",\n  },\n};\n\nfunction rangeEventsToApexchartSeries(\n  dicEventRange: Record<EventComponentType, EventCommanderRange[]>\n): SeriesApexChart[] {\n  return Object.values(dicEventRange)\n    .flatMap((x) => x)\n    .map((event) => ({\n      x: event.type,\n      y: [moment(event.from).valueOf(), moment(event.to).valueOf()],\n      fillColor: eventStateTypeColor[event.type][event.state],\n      state: event.state,\n    }));\n}\nexport default rangeEventsToApexchartSeries;\n","import _ from \"lodash\";\nimport rangeEventsToApexchartSeries from \"../business-logic/rangeEventsToApexchartSeries\";\n\n// optimizing state\nconst selectorGetSeries = _.memoize(\n  (eventCommanderRangeList, title = \"commander-1\") => [\n    {\n      title,\n      data: rangeEventsToApexchartSeries(eventCommanderRangeList),\n    },\n  ]\n);\n\nexport default selectorGetSeries;\n","function sleepPromise(millisecond: number = 2000) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, millisecond);\n  });\n}\n\nexport default sleepPromise;\n","import moment from \"moment\";\nimport { EventCommander, EventCommanderRange } from \"../models/events\";\n/**\n * Map list of EventCommander to list of EventCommanderRange\n * @param listEvents\n * @param precision\n * @returns\n */\nfunction eventsToRangeEvents(\n  listEvents: EventCommander[],\n  precision: number = 12\n): EventCommanderRange[] {\n  return listEvents.reduce((listEventRange, itemEvent, index) => {\n    // first item\n    if (index === 0)\n      return [\n        {\n          from: itemEvent.timestamp,\n          to: \"\",\n          type: itemEvent.type,\n          state: itemEvent.state,\n        },\n      ];\n    const previousEvent = listEvents[index - 1];\n    let lastEventRange = listEventRange[listEventRange.length - 1];\n\n    // each item\n    if (\n      lastEventRange.state !== itemEvent.state ||\n      !moment(previousEvent.timestamp)\n      // TODO: change seconds\n        .add(precision, \"hours\")\n        .isSameOrAfter(itemEvent.timestamp)\n    ) {\n      lastEventRange.to = itemEvent.timestamp;\n      lastEventRange = {\n        from: itemEvent.timestamp,\n        to: \"\",\n        type: itemEvent.type,\n        state: itemEvent.state,\n      };\n      listEventRange.push(lastEventRange);\n    }\n\n    // last item\n    if (index === listEvents.length - 1) {\n      lastEventRange.to = itemEvent.timestamp;\n    }\n\n    return listEventRange;\n  }, [] as EventCommanderRange[]);\n}\n\nexport default eventsToRangeEvents;\n","import moment, { Moment } from \"moment\";\nimport _ from \"lodash\";\n\nimport {\n  EventCommander,\n  EventComponentType,\n  EventStateType,\n} from \"../../models/events\";\n/**\n * get a state according a probability of last item in the list\n *\n * @param list list of events to extract the last\n * @param probabilityToPreserveState (optional) a number between [0-1] to get the same state of last event\n */\nfunction getEventState(\n  list: EventCommander[],\n  probabilityToPreserveState: number = 0.9\n): EventStateType {\n  const lastItem = list[list.length - 1];\n  if (!lastItem) return EventStateType.ON;\n  if (Math.random() > probabilityToPreserveState) {\n    const possiblesStates: EventStateType[] = Object.values(\n      EventStateType\n    ).filter((item) => item !== lastItem.state) as EventStateType[];\n    return _.sample(possiblesStates) as EventStateType;\n  } else {\n    return lastItem.state;\n  }\n}\n/**\n * Mutation for event dict-list to add a new event on each value\n *\n * @param type\n * @param timestamp\n * @param events\n */\nfunction pushValue(\n  type: EventComponentType,\n  timestamp: Moment,\n  events: Record<EventComponentType, EventCommander[]>\n) {\n  events[type].push({\n    state: getEventState(events[type]),\n    timestamp,\n    type,\n  });\n}\n\nfunction eventsMock(\n  from: Moment = moment(),\n  to: Moment = moment(from).add(70, \"days\")\n): Record<EventComponentType, EventCommander[]> {\n  const events: Record<EventComponentType, EventCommander[]> = {\n    [EventComponentType.DEVICE]: [],\n    [EventComponentType.COMPRESSOR]: [],\n    [EventComponentType.FAN]: [],\n    [EventComponentType.LIGHT]: [],\n  };\n\n  for (\n    let currentMoment = moment(from);\n    currentMoment.isSameOrBefore(to);\n    // seconds a lot of examples\n    // currentMoment = moment(currentMoment).add(10, \"seconds\")\n    currentMoment = moment(currentMoment).add(10, \"hours\")\n  ) {\n    Object.values(EventComponentType).forEach((type) =>\n      pushValue(type as EventComponentType, currentMoment, events)\n    );\n  }\n  return events;\n}\n\nexport default eventsMock;\n","import sleepPromise from \"../../../shared/utils/mock/sleepPromise\";\nimport {\n  EventCommander,\n  EventCommanderRange,\n  EventComponentType,\n} from \"../models/events\";\nimport { FilterState } from \"../models/filters\";\nimport eventsToRangeEvents from \"./eventsToRangeEvents\";\nimport eventsMock from \"./mock/eventsMock\";\n\nexport const API_URL = \"https://some-api.com/api/commander/events\";\n\nfunction addEvents(\n  events: Record<EventComponentType, EventCommander[]>,\n  type: EventComponentType,\n  filterState: FilterState\n) {\n  return filterState.components.includes(type)\n    ? eventsToRangeEvents(events[type])\n    : [];\n}\n/**\n * API for EventCommander\n */\nconst eventCommanderAPI = {\n  getEvents: (\n    filterState: FilterState\n  ): Promise<Record<EventComponentType, EventCommanderRange[]>> =>\n    sleepPromise()\n      .then(() => {\n        return eventsMock(filterState.dates.from, filterState.dates.to);\n      })\n      .then((events) =>\n        Object.keys(events).reduce((dic, key) => {\n          dic[key as EventComponentType] = events[\n            key as EventComponentType\n          ].filter((item) => filterState.states.includes(item.state));\n          return dic;\n        }, {} as Record<EventComponentType, EventCommander[]>)\n      )\n      .then((events) => ({\n        [EventComponentType.DEVICE]: addEvents(\n          events,\n          EventComponentType.DEVICE,\n          filterState\n        ),\n        [EventComponentType.COMPRESSOR]: addEvents(\n          events,\n          EventComponentType.COMPRESSOR,\n          filterState\n        ),\n        [EventComponentType.FAN]: addEvents(\n          events,\n          EventComponentType.FAN,\n          filterState\n        ),\n        [EventComponentType.LIGHT]: addEvents(\n          events,\n          EventComponentType.LIGHT,\n          filterState\n        ),\n      }))\n      .then((data) => {\n        console.log(\"eventCommanderAPI:\", { data });\n        return data;\n      }),\n};\nexport default eventCommanderAPI;\n","import { useState, useEffect } from \"react\";\nimport eventCommanderAPI from \"../business-logic/eventCommanderAPI\";\nimport { EventCommanderRange, EventComponentType } from \"../models/events\";\nimport { FilterState } from \"../models/filters\";\n\nfunction useEventCommanderRange(filterState: FilterState) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<undefined | string>(undefined);\n  const [eventCommanderRangeList, setEventCommanderRangeList] = useState<\n    Record<EventComponentType, EventCommanderRange[]>\n  >({\n    [EventComponentType.DEVICE]: [],\n    [EventComponentType.COMPRESSOR]: [],\n    [EventComponentType.FAN]: [],\n    [EventComponentType.LIGHT]: [],\n  });\n\n  useEffect(() => {\n    setLoading(true);\n    eventCommanderAPI\n      .getEvents(filterState)\n      .then(setEventCommanderRangeList)\n      // .catch(setError)\n      .finally(() => setLoading(false));\n  }, [filterState]);\n\n  return [eventCommanderRangeList, loading, error];\n}\nexport default useEventCommanderRange;\n","import _ from \"lodash\";\nimport { ReactNode } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\n\nexport function toggleItem<T>(list: T[], item: T) {\n  const elementInList = list.find((itemList) => _.isEqual(item, itemList));\n  if (!!elementInList) {\n    return list.filter((itemList) => itemList !== elementInList);\n  }\n  return [...list, item];\n}\n\nexport function hasItem<T>(list: T[], item: T) {\n  const elementInList = list.find((itemList) => _.isEqual(item, itemList));\n  return !!elementInList;\n}\n\nexport interface MultipleChoseFormProps {\n  label?: ReactNode;\n  controlId: string;\n  options: { text: ReactNode; value: any; id: string; color?: string }[];\n  field: string[];\n  setField: (list: string[]) => void;\n}\n\nfunction MultipleChoseForm({\n  controlId,\n  field,\n  setField,\n  options,\n  label,\n}: MultipleChoseFormProps) {\n  return (\n    <Card.Body>\n      <Form.Group controlId={controlId}>\n        <Form.Label>{label}</Form.Label>\n        {options.map((item) => (\n          <Form.Check\n            id={item.id}\n            type=\"checkbox\"\n            name={item.id}\n            label={item.text}\n            onChange={() => setField(toggleItem(field, item.value))}\n            checked={hasItem(field, item.value)}\n            style={\n              item.color\n                ? {\n                    color: item.color,\n                  }\n                : undefined\n            }\n          />\n        ))}\n      </Form.Group>\n    </Card.Body>\n  );\n}\nexport default MultipleChoseForm;\n","import React, { ReactNode } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport moment, { Moment } from \"moment\";\n\nexport interface RangeDateTimePickerProps {\n  labelFrom?: ReactNode;\n  labelTo?: ReactNode;\n  controlId: string;\n  field: { from: Moment; to: Moment };\n  setField: (state: { from: Moment; to: Moment }) => void;\n}\n\nfunction RangeDateTimePicker({\n  controlId,\n  field,\n  setField,\n  labelFrom,\n  labelTo,\n}: RangeDateTimePickerProps) {\n  const setFrom = (from: string) => setField({ ...field, from: moment(from) });\n  const setTo = (to: string) => setField({ ...field, to: moment(to) });\n  return (\n    <>\n      <TextField\n        id={`${controlId}-from`}\n        label={labelFrom}\n        type=\"datetime-local\"\n        value={field.from.toISOString().split(\".\")[0]}\n        onChange={(e) => setFrom(e.target.value)}\n        variant=\"outlined\"\n        className=\"mx-3\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n      <TextField\n        id={`${controlId}-from`}\n        label={labelTo}\n        type=\"datetime-local\"\n        value={field.to.toISOString().split(\".\")[0]}\n        onChange={(e) => setTo(e.target.value)}\n        variant=\"outlined\"\n        className=\"mx-3\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n    </>\n  );\n}\nexport default RangeDateTimePicker;\n","import _ from \"lodash\";\nimport { useRef } from \"react\";\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\n\nimport { EventComponentType, EventStateType } from \"../models/events\";\nimport { eventStateTypeColor } from \"../business-logic/rangeEventsToApexchartSeries\";\nimport MultipleChoseForm, { MultipleChoseFormProps } from \"./MultipleChoseForm\";\nimport RangeDateTimePicker from \"./RangeDateTimePicker\";\nimport { FilterState } from \"../models/filters\";\nexport interface FilterProps {\n  filterState: FilterState;\n  setFilterState: (state: FilterState) => void;\n}\n\nexport enum FilterTypes {\n  COMPONENTS = \"COMPONENTS\",\n  STATES = \"STATES\",\n  DATES = \"DATES\",\n}\n\nfunction Filters({ filterState, setFilterState }: FilterProps) {\n  const refForm = useRef<HTMLFormElement | null>(null);\n  const { components, states, dates } = filterState;\n  const setComponents = (components: string[]) =>\n    setFilterState({ ...filterState, components });\n  const setStates = (states: string[]) =>\n    setFilterState({ ...filterState, states });\n  const setDates = (dates: FilterState[\"dates\"]) =>\n    setFilterState({ ...filterState, dates });\n  return (\n    <Form ref={refForm}>\n      <Accordion>\n        <Card>\n          <Card.Header className=\"d-flex flex-row justify-content-between align-items-center\">\n            <h3 className=\"text-primary\">Select filter</h3>\n            <div>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.COMPONENTS}\n                size=\"lg\"\n              >\n                Components\n              </Accordion.Toggle>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.STATES}\n                size=\"lg\"\n              >\n                States\n              </Accordion.Toggle>\n              <Accordion.Toggle\n                className=\"mx-2\"\n                as={Button}\n                eventKey={FilterTypes.DATES}\n                size=\"lg\"\n              >\n                Dates\n              </Accordion.Toggle>\n            </div>\n          </Card.Header>\n          <Accordion.Collapse eventKey={FilterTypes.COMPONENTS}>\n            <Card.Body>\n              <MultipleChoseForm\n                controlId=\"components\"\n                options={componentsOptions}\n                label=\"Select components\"\n                setField={setComponents}\n                field={components}\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n          <Accordion.Collapse eventKey={FilterTypes.STATES}>\n            <Card.Body>\n              <MultipleChoseForm\n                controlId=\"states\"\n                options={statesOptions}\n                label=\"Select states\"\n                setField={setStates}\n                field={states}\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n          <Accordion.Collapse eventKey={FilterTypes.DATES}>\n            <Card.Body>\n              <RangeDateTimePicker\n                controlId=\"dates\"\n                field={dates}\n                setField={setDates}\n                labelFrom=\"Start date\"\n                labelTo=\"Final date\"\n              />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    </Form>\n  );\n}\n\nconst componentsOptions: MultipleChoseFormProps[\"options\"] = Object.values(\n  EventComponentType\n).map((value) => ({\n  text: value,\n  value,\n  id: value,\n  color: eventStateTypeColor[value as EventComponentType][EventStateType.ON],\n}));\n\nconst statesOptions: MultipleChoseFormProps[\"options\"] = Object.values(\n  EventStateType\n).map((value) => ({\n  text: value,\n  value,\n  id: value,\n}));\nexport default Filters;\n","import _ from \"lodash\";\nimport { ReactNode, useRef, useState } from \"react\";\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport ReactApexChart from \"react-apexcharts\";\n\nimport \"./Commander.scss\";\n\nimport options from \"../../shared/apexcharts/config\";\nimport Loading from \"../../shared/components/Loading\";\nimport selectorGetSeries from \"./state/selectorGetSeries\";\nimport useEventCommanderRange from \"./state/useEventCommanderRange\";\nimport { EventComponentType, EventStateType } from \"./models/events\";\nimport { eventStateTypeColor } from \"./business-logic/rangeEventsToApexchartSeries\";\nimport Filters from \"./components/Filters\";\nimport { FilterState } from \"./models/filters\";\nimport moment from \"moment\";\n\nexport const initialFilterState: FilterState = {\n  components: Object.values(EventComponentType),\n  states: Object.values(EventStateType),\n  dates: { from: moment().add(-10, \"days\"), to: moment() },\n};\n\nfunction Commander() {\n  const [filterState, setFilterState] = useState<FilterState>(\n    initialFilterState\n  );\n\n  const [eventCommanderRangeList, loading, error] = useEventCommanderRange(filterState);\n  const series = selectorGetSeries(eventCommanderRangeList);\n\n  return (\n    <div className=\"Commander\">\n      <h1  className=\"text-primary text-center my-5\">Commander: {series[0].title}</h1>\n      <Card className=\"m-3\">\n        <div>\n          <Filters filterState={filterState} setFilterState={setFilterState} />\n        </div>\n        <div id=\"chart\">\n          {loading ? (\n            <Loading />\n          ) : (\n            <ReactApexChart\n              options={options}\n              series={series}\n              type=\"rangeBar\"\n              height={500}\n            />\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default Commander;\n","export default __webpack_public_path__ + \"static/media/logo-stor.89e05a91.jpeg\";","import \"./App.scss\";\nimport Commander from \"./modules/Commander/Commander\";\nimport logo from \"./assets/imgs/logo-stor.jpeg\";\n\n// Configure FontAwesome\nimport fontawesome from \"@fortawesome/fontawesome\";\nimport { faCheckSquare, faCoffee } from \"@fortawesome/fontawesome-free-solid\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\n\nfontawesome.library.add(faCheckSquare, faCoffee);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">\n            <img className=\"d-none d-md-inline mx-2\" src={logo} alt=\"Logo\" />{\" \"}\n            <span className=\"text-primary\">Commander app</span>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#home\">Home</Nav.Link>\n              <Nav.Link href=\"#link\">Events</Nav.Link>\n              <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">\n                  Another action\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">\n                  Something\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">\n                  Separated link\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </header>\n      <main>\n        <Commander />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}